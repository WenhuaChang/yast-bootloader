/**
 * File:
 *  kernelParams.ycp
 *
 * Module:
 *  Bootloader configurator
 *
 * Summary:
 *  Universal finctions for accessing kernel parameters.
 *
 * Authors:
 *  Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{
    include "testsuite.ycp";
    import "Pkg";
    map IREAD = $["target" : $[
            "string" : "root (hd0,0)\ninstall /grub/stage1 d (hd0) /grub/stage2 0x8000 (hd0,0)/grub/menu.lst\nquit",
            "tmpdir" : "/tmp"
        ], "etc" : $[
            "fstab" : [],
            "install_inf" : $[
                "Locale" : "en_EN",
                "InstMode" : "cd"
            ],
            "mtab" : []
        ], "probe" : $[
            "disk" : [],
            "boot_arch" : "grub",
            "architecture" : "i386",
            "has_apm" : true,
            "has_pcmcia" : false,
            "has_smp" : false,
            "system" : [],
            "floppy" : $[
                "manual" : []
            ], "cdrom" : $[
                "manual" : []
            ]
        ], "sysconfig" : $[
            "console" : $[
                "CONSOLE_FONT" : "lat2-16.psfu",
                "CONSOLE_SCREENMAP" : "trivial",
                "CONSOLE_UNICODEMAP" : "",
                "CONSOLE_MAGIC" : "(K",
                "CONSOLE_ENCODING" : "ISO-8859-2"
            ],
            "bootloader" : $[
                "LOADER_TYPE" : "grub"
            ]
        ], "md" : $[
            "config" : $[]
        ], "lvm" : $[
            "vg" : $[],
            "pv" : $[]
        ], "proc" : $[
            "swaps" : [],
            "mounts" : []
        ]
    ];
    TESTSUITE_INIT ([IREAD, $[], $[]], 0);
    include "lilo/misc.ycp";

    map READ = $["grub": $["sections" : $["linux" : $["kernel" : "(hd0,0)/vmlinuz.suse noval root=/dev/hda3 vga=333 ide=nodma noarg init=/bin/bash"]]],
		 "lilo": $["sections" : $["linux" : $["kernel" : "/boot/vmlinuz.suse", "vga" : "333", "root" : "/dev/hda3", "append" : "noarg ide=nodma init=/bin/bash"]]]];

    global define boot () ``{return "grub";}
    Lilo::mode = `grub;

    TEST (``(getKernelParam ("linux", "root")), [READ, $[], $[]], 0);
    TEST (``(getKernelParam ("linux", "vga")), [READ, $[], $[]], 0);
    TEST (``(getKernelParam ("linux", "init")), [READ, $[], $[]], 0);
    TEST (``(getKernelParam ("linux", "noarg")), [READ, $[], $[]], 0);
    DUMP("==================================================================");
    TEST (``(setKernelParam ("linux", "root", "/dev/hda5")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "vga", "555")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "ide", "false")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "extra", "true")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "vga", "false")), [READ, $[], $[]], 0);
    DUMP("==================================================================");
    TEST (``(saveBootloaderConfig (true)), [READ, $[], $[]], 0);
    TEST (``(saveBootloaderConfig (false)), [READ, $[], $[]], 0);

    global define boot () ``{return "lilo";}
    Lilo::mode = `lilo;

    DUMP("==================================================================");
    TEST (``(getKernelParam ("linux", "root")), [READ, $[], $[]], 0);
    TEST (``(getKernelParam ("linux", "vga")), [READ, $[], $[]], 0);
    TEST (``(getKernelParam ("linux", "init")), [READ, $[], $[]], 0);
    TEST (``(getKernelParam ("linux", "noarg")), [READ, $[], $[]], 0);
    DUMP("==================================================================");
    TEST (``(setKernelParam ("linux", "root", "/dev/hda5")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "vga", "555")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "ide", "false")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "extra", "true")), [READ, $[], $[]], 0);
    TEST (``(setKernelParam ("linux", "vga", "true")), [READ, $[], $[]], 0);
    DUMP("==================================================================");
    TEST (``(saveBootloaderConfig (true)), [READ, $[], $[]], 0);
    TEST (``(saveBootloaderConfig (false)), [READ, $[], $[]], 0);

}

