/**
 * File:
 *   lilo.ycp
 *
 * Module:
 *   Configuration of lilo
 *
 * Summary:
 *   Main file
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/07/30
 *
 *
 * $Id$
 *
 * Main file for lilo configuration. Uses all other files.
 *
 */

{

/***
 * <h3>LILO Configuration</h3>
 */

textdomain "bootloader";

import "Lilo";
import "Mode";
include "lilo/routines.ycp";

if (Mode::test)
{
    Lilo::autoinstallation = true;
    Lilo::globals = $["boot":"/dev/hda", "prompt":"true", "default": "Linux", "timeout":80];
    Lilo::sections= [$["label":"Linux", "image":"/boot/vmlinuz", "root":"/dev/hda3"],
		     $["label":"Memtest86", "image":"/boot/memtest.bin"]];
    Lilo::bootPart = "/dev/hda";
}


if (!Lilo::autoinstallation)
{
    Lilo::Read(``{});
}

map HELP_STRINGS = $[];

include "lilo/routines.ycp";
include "lilo/io.ycp";
include "lilo/ui.ycp";
include "lilo/helps.ycp";
import "Arch";
import "Installation";
import "Wizard";

/* The main() */
y2debug("Lilo module started");

boolean initial_mode = false;

if (size(WFM::Args()) > 0)
{
    initial_mode = WFM::Args(0);
}

/*
 * exit when running for non-root
 *
 */

map res = SCR::`Execute(.target.bash_output, "/usr/bin/whoami", $[]);
list l_res = splitstring(lookup(res, "stdout", ""), "\n");
if( !Mode::test && size(l_res) > 0 &&  select(l_res, 0, "") != "root")
{
    UI::MessagePopup(_("You need to be logged in as root
to configure the boot loader.
"));
    return;
}

/*
 * global var- for storing lastly selected way in action dialog
 */

symbol action_sel = nil;
symbol summary_sel = nil;

/*
 * global variable- boot partition. we need to remember this for the future
 * because lilo should be uninstalled from device, where it was lastly installed
 */

string bootPart = "";


/**
 * this variable signalizes that nothing was changed, thus we can
 * finish this module without saving and launching /sbin/lilo.
 * if set to false, changes will be written and applied.
 *
 */
boolean untouched = true;

boolean restoredLilo = false;

map partmap = $[];

/*
 * installed operating systems list. needs to ba cached,
 * because detection is very time consuming when pressing next/back
 *
 */

list scanned_os = nil;

/*
 * settings that will be saved to lilo.conf
 *
 */

map liloconf = $[];

// map settings = LiloRead();

any ret = LiloMainDialog(); //settings);
y2debug("ret = %1",ret);

if (ret == `ok)
{
    if (Lilo::autoinstallation)
    {
	return `ok;
    }

    // this msg is displayed when the dialog has finished
    string message = _("Please wait while the configuration files are being updated.");
    UI::`OpenDialog(`opt(`decorated), `Label(message));
    if (!Lilo::uninstallLilo)
    {
	map ret = Lilo::Write(``{}, ``{});
	y2debug("write = %1", ret);
    }
    UI::`CloseDialog();
    return `next;
}
else if (ret == `back && restoredLilo)
{
    if (initial_mode)
    {

    }
    else
    {
	undoRestore();
    }
}
else if (ret == `back)
{
    if (Lilo::autoinstallation)
    {
	Lilo::discard_settings = true;
    }
    return `back;
}

/* Finish */
y2debug("Lilo module finished");

}
