/**
 * File:
 *      include/bootloader/lilo/widgets.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Widgets specific for LILO bootloader
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */


{

    textdomain "bootloader";

    /**
      * Get map of dialogs and widgets
      * @return map of dialogs and widgets
      */
    global define map GetWidgets () ``{
        return $[
                "experttarget" : getExpertWidget (),
        ];
    }




    global define map getExpertWidget () ``{
        term widget = `Frame (_("Expert settings"), `VBox (
                    `Left (`CheckBox (`id (`activ),
                        _("&Activate bootloader partition"))),
                    `Left (`CheckBox (`id (`replmbr),
                        _("R&eplace MBR with generic code"))),
                    `Left (`CheckBox (`id (`lba), _("Use &LBA-32 mode"))),
		    `Left (`CheckBox (`id (`linear),
			_("&Use the 'linear' option")))
            ));
        return $[
            "widget" : widget,
            "restore" : ``(BootLILO::expertRead ()),
            "handle" : ``(BootLILO::expertWrite ()),
            "help" : getExpertLocationHelp (),
        ];

    }

    global define void expertRead () ``{
	BootCommon::expertRead ();
	UI::ChangeWidget (`id (`lba), `Value,
	    BootCommon::tmp_store["globals","lba32"]:false);
	UI::ChangeWidget (`id (`linear), `Value,
	    BootCommon::tmp_store["globals","linear"]:false);
    };

    global define symbol expertWrite (any op, list tosave) ``{
	BootCommon::expertWrite (op, tosave);
	if (contains (tosave, op))
	{
	    BootCommon::tmp_store["globals","lba32"]
		= UI::QueryWidget (`id (`lba), `Value);
	    BootCommon::tmp_store["globals","linear"]
		= UI::QueryWidget (`id (`linear), `Value);
	}
        return op;
    }

}
