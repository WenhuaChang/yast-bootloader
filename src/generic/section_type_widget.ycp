/**
 * File:
 *      include/bootloader/generic/section_type_widget.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Widget to select type of new configuration section to be created
 *
 * Authors:
 *      Joachim Plack <jplack@suse.de>
 *
 * $Id$
 *
 */


{

textdomain "bootloader";

import "BootCommon";

include "bootloader/generic/widget_funcs.ycp";


/**
 *   section types widget
 */

// option cache and reader function
map<string,any> _st_options = nil;

map<string,any> ST_options () {
    if ( _st_options == nil)
    {
	_st_options = (map<string,any>)union(
	    $[ "type_clone":"bool:Clone Selected Section" ],
	    filter( string key, any value, BootCommon::section_options, {
		return substring(key,0,5) == "type_";
	    })
	);
    }
    return _st_options;
}


/**
 * Handle function of a widget
 * @param widget string widget key
 * @param event map event description of event that occured
 * @return symbol to return to wizard sequencer, or nil
 */
symbol ST_Handle (string widget, map event) {
    if (event["ID"]:nil != `next)
	return nil;
    string selected = (string)
	UI::QueryWidget (`id (`section_type), `CurrentButton);
    if (selected != "type_clone")
    {
	BootCommon::current_section = $[
	    "type" : substring(selected,5),
	];
    }
    else
    {
	BootCommon::current_section["name"] = "";
	BootCommon::current_section["original_name"] = "";
	BootCommon::current_section["__auto"] = false;
	if (haskey(BootCommon::current_section,"lines_cache_id"))
		BootCommon::current_section = remove(BootCommon::current_section, "lines_cache_id");
    }
    return nil;
}


/**
 * Build a map describing a widget
 * @return a map describing a widget
 */
map<string,any> genericSectionTypeWidget() {
    map<string,any> gt_map = generic_Term(ST_options(), "radio");

    return $[
        "widget" : `custom,
        "custom_widget" : `Frame (_("Section Type"), `VBox (
	    `VSpacing (1),
	    `HBox (
	        `HSpacing (2),
	        `RadioButtonGroup (`id (`section_type), (term) gt_map["term"]:nil),
	        `HSpacing (2)
	    ),
	    `VSpacing (1)
        )),
	"handle" : ST_Handle,
        "help" : generic_Help("section-type") + (string) gt_map["help"]:"",
    ];
}


} // include end

/*
 * Local variables:
 *     mode: ycp
 *     mode: font-lock
 *     mode: auto-fill
 *     indent-level: 4
 *     fill-column: 78
 * End:
 */
