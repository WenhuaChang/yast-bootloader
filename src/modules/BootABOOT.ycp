/**
 * File:
 *      modules/BootABOOT.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Module containing specific functions for ABOOT configuration
 *      and installation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *      Klaus Kaempf <kkaempf@suse.de>
 *
 * $Id$
 *
 */

{
    module "BootABOOT";

    textdomain "bootloader";

    import "Kernel";
    import "Storage";
    import "Product";
    import "StorageControllers";
    import "BootCommon";

    include "bootloader/routines/popups.ycp";

// general functions

    /**
      * Return map of provided functions
      * @return map map of functions (eg. $["write":``(BootLILO::Write ())])
      */
    global define map GetFunctions () ``{
	return $[
	    "read" :	``(BootABOOT::Read ()),
	    "propose" : ``(BootABOOT::Propose ()),
	    "save" :	``(BootABOOT::Save ()),
	    "summary" :	``(BootABOOT::Summary ()),
	    "update" :	``(BootABOOT::Update ()),
	    "write" :	``(BootABOOT::Write ()),
	    "sequence" :``(BootABOOT::FixSequence ()),
	];
    }
    /**
      * Propose bootloader settings
      */
    global define void Propose () ``{
	BootCommon::DetectDisks ();
    }

    /**
      * Read settings from disk
      * @return boolean true on success
      */
    global define boolean Read () ``{
	BootCommon::DetectDisks ();
    }

    global define boolean Save () ``{
	string root_device = BootCommon::RootPartitionDevice;

	string zipl_conf = "# Generated by YaST2
[defaultboot]
default=ipl

[ipl]
target=/boot/zipl
image=/boot/kernel/image
ramdisk=/boot/initrd
parameters=\"" + StorageControllers::dasdParam + " root=" + root_device;

	zipl_conf = zipl_conf + "\"

[dumpdasd]
target=/boot/zipl
dumpto=/dev/dasd??

[dumptape]
target=/boot/zipl
dumpto=/dev/rtibm0
";

	boolean ret = SCR::Write (.target.string, "/etc/zipl.conf", zipl_conf);

	// append chandev to /etc/chandev.conf
	string chandev = SCR::Read(.etc.install_inf.Chandev);
	if( chandev == nil )
	{
	    chandev = "";
	}

	if (chandev != "")
	{
	    ret = ret && (0 == SCR::Execute (.target.bash,
		"/bin/echo '"+chandev+"' >> /etc/chandev.conf"));
	}
	return ret;
    }

    global define list(string) Summary () ``{
	return [_("Install ABOOT bootloader")];
    }

    /**
      * Update read settings to new version of configuration files
      */
    global define void Update () ``{
    }

    /**
      * Write bootloader settings to disk
      * @return boolean true on success
      */
    global define boolean Write () ``{
        // where is "/boot" located ?
        string boot_device = BootCommon::BootPartitionDevice;

        // where is "/" located ?
        string root_device = BootCommon::RootPartitionDevice;

        string docmd = "/usr/lib/YaST2/bin/do"
	    + BootCommon::getLoaderType (false) + " /";
        SCR::Execute (.target.bash, docmd, $["RDEV": root_device, "BDEV": boot_device]);

        return true;
    }

    /**
      * Update bootlaoder configuration sequence
      * @param ws_data map of wizard sequencer data
      * @return map modified map of wizard sequencer data
      */
    global define map FixSequence (map ws_data) ``{
        map aliases = $[
	    "summary" : ``(BootABOOT::runSummaryDialog ()),
        ];
        ws_data["aliases"] = aliases;
        return ws_data;
    }



// end of mandatory functions
//----------------------------------------------------------------------------

    /**
      * Empty summary dialog
      * @return symbol always `back
      */
    global define symbol runSummaryDialog () ``{
	displayNoSupportPopup ();
	return `back;
    }
}
