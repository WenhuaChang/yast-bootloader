/**
 * File:
 *      modules/BootGRUB.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Module containing specific functions for GRUB configuration
 *      and installation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{
    module "BootGRUB";

    textdomain "bootloader";

    import "Mode";
    import "Kernel";
    import "Storage";
    import "Arch";

    import "BootCommon";
    import "BootGRUB";

    include "bootloader/grub/misc.ycp";
    include "bootloader/grub/widgets.ycp";

    include "bootloader/routines/popups.ycp";
    include "bootloader/routines/routines.ycp";

// private variables

    /**
      * map from grub device names to linux device names
      */
    global list device_map = [];
    /**
      * parsed contents of /etc/grub.conf file
      */
    global map grub_conf = $[];
    /**
      * was grub_conf changed by user manually?
      */
    global boolean gc_changed = false;
    /**
      * List of partitions deleted in primary proposal
      */
    list(string) del_parts = [];
    /**
      * Shall proposal merge menus?
      */
    global boolean deep_propose = false;
    /**
      * Insert saved MBR to bootloader menu?
      */
    global boolean insert_saved_mbr = false;

// variables for temporary data

    /**
      * Disks order for ordering widget purproses
      */
    global list(string) disks_order = nil;

// general functions

    /**
      * Constructor
      */
    global define BootGRUB () ``{
        BootCommon::bootloader_attribs["grub"] = $[
            "section_title" : "title",
	    "kernel_key" : "kernel",
	    "required_packages" : ["grub"],
	    "loader_name" : "GRUB",
	    "default_key" : "default",
	    "default_type" : `index,
	    "default_index_first" : 0,
	    "timeout_multiplier" : 1,
	    "alias_keys" : [],
            "convert_function" : ``(BootGRUB::convertSection ()),
	    "kernel_params" : $[
		`other : "kernel",
	    ],
	    "update_passwd" :
		``{password = sformat ("--md5 %1", cryptmd5 (password));},
	    "propose" : true,
	    "read" : true,
	    "scratch" : true,
	    "additional_entries" : [`item (`id (`propose_deep),
		// menubutton item, keep as short as possible
		_("Propose and &Merge with Existing GRUB Menus"))],
	    "restore_mbr" : true,
	    "key_only_once" : false,
	    "bootloader_on_disk" : true,
        ];
    }

    /**
      * Return map of provided functions
      * @return map map of functions (eg. $["write":``(BootGRUB::Write ())])
      */
    global define map GetFunctions () ``{
	return $[
            "export"   : ``(BootGRUB::Export ()),
            "import"   : ``(BootGRUB::Import ()),
            "read"     : ``(BootGRUB::Read ()),
            "reset"    : ``(BootGRUB::Reset ()),
            "propose"  : ``(BootGRUB::Propose ()),
            "save"     : ``(BootGRUB::Save ()),
            "update"   : ``(BootGRUB::Update ()),
            "write"    : ``(BootGRUB::Write ()),
	    "sequence" : ``(BootGRUB::FixSequence ()),
	    "widgets"  : ``(BootGRUB::GetWidgets ()),
            "getfiles" : ``(BootGRUB::GetFiles ()),
            "setfiles" : ``(BootGRUB::SetFiles ()),
	    "getoptions":``(BootGRUB::GetOptions ()),
	    "updoptlst": ``(BootGRUB::UpdateOptionsList ()),
	];
    }

    /**
      * Export bootloader settings to a map
      * @return bootloader settings
      */
    global define map Export () ``{
	map ret = BootCommon::Export ();
	ret["device_map"] = device_map;
	ret["grub_conf"] = grub_conf;
	return ret;
    }
    /**
      * Import settings from a map
      * @param settings map of bootloader settings
      */
    global define void Import (map settings) ``{
	y2debug ("Started BootGRUB::Import ()");
	BootCommon::Import (settings);
	y2debug ("Importing GRUB-specific settings %1", settings);
	device_map = settings["device_map"]:proposeDeviceMap ();
	grub_conf = settings["grub_conf"]:proposeGrubConf ();
	y2debug ("GRUB import done");
    }
    /**
      * Read settings from disk
      * @return boolean true on success
      */
    global define boolean Read () ``{
	BootCommon::DetectDisks ();
	grub_conf = readGrubConf ();
	device_map = readDeviceMap ();
	string mbrD = grubDev2unixDev ("(hd0)");
	if (mbrD != "/dev/null" && mbrD != nil && mbrD != "")
	    BootCommon::mbrDisk = mbrD;
	boolean ret = BootCommon::Read ();
	BootCommon::loader_device = grubDev2unixDev (grub_conf["device"]:"");
	return ret;
    }

    /**
      * Reset bootloader settings
      */
    global define void Reset () ``{
	if (Mode::autoinst)
	    return;
	device_map = [];
	BootCommon::Reset ();
	device_map = proposeDeviceMap ();
	if (! Mode::config)
	    grub_conf = proposeGrubConf ();
	else
	    grub_conf = $[];
    }
    /**
      * Propose bootloader settings
      */
    global define void Propose () ``{
	y2debug ("Started propose: Glob: %1, Sec: %2",
	    BootCommon::globals, BootCommon::sections);
        if (! BootCommon::was_proposed)
	{
            BootCommon::DetectDisks ();
	    del_parts = BootCommon::getPartitionList (`deleted);
	}

	// refresh device map
	if (device_map == [] || device_map == nil)
	    device_map = proposeDeviceMap ();
	if (/*(grub_conf == $[] || grub_conf == nil) &&*/ ! Mode::config)
	    grub_conf = proposeGrubConf ();
	string mbrD = grubDev2unixDev ("(hd0)");
	if (mbrD != "/dev/null" && mbrD != nil && mbrD != "")
	    BootCommon::mbrDisk = mbrD;
	boolean disks_changed = BootCommon::RefreshDisks();
	if (disks_changed && ! Mode::autoinst)
	{
	    if (askLocationResetPopup (BootCommon::loader_device))
	    {
		BootCommon::location = "";
		BootCommon::DetectDisks ();
	    }
	}

	BootCommon::loader_device = BootCommon::GetBootloaderDevice ();

	// set activate flag
	if (! BootCommon::activate_changed)
	{
	    BootCommon::activate
		= size (Storage::GetBootPartition (BootCommon::mbrDisk)) == 0;
	}

	if (BootCommon::sections == nil || size (BootCommon::sections) == 0)
	{
	    createSections ();
	    BootCommon::kernelCmdLine = Kernel::cmdLine;
	}
	else
	{
	    if (Mode::autoinst)
	    {
		// TODO whatever will be needed
	    }
	    else
		fixSections (disks_changed);
	}
	if (BootCommon::globals == nil || size (BootCommon::globals) == 0)
	{
	    createGlobals ();
	}
	else
	{
            if (Mode::autoinst)
            {
                // TODO whatever will be needed
            }
            else
		fixGlobals (disks_changed);
	}

	y2error ("Proposed sections: %1", BootCommon::sections);
	y2error ("Proposed globals: %1", BootCommon::globals);
	BootCommon::saveCfgFileToAgent ();
    }

    /**
      * Save all bootloader configuration files
      * @return boolean true if success
      */
    global define boolean Save () ``{
	SCR::Execute (.target.bash, "test -f /boot/grub/menu.lst && /bin/cp /boot/grub/menu.lst /boot/grub/menu.lst.old");
	SCR::Execute (.target.bash, "test -f /boot/grub/device.map && /bin/cp /boot/grub/device.map /boot/grub/device.map.old");
	SCR::Execute (.target.bash, "test -f /etc/grub.conf && /bin/cp /etc/grub.conf /etc/grub.conf.old");
	grub_conf["device"] = unixDev2grubDev (BootCommon::loader_device);
	saveGrubConf (grub_conf);
	saveDeviceMap (device_map);
	BootCommon::sections = filter (`s, BootCommon::sections, ``{
	    map intern = lookup_value (s, "__intern__", $[]);
	    string title = lookup_value (s, "title", "");
	    if (intern["converted"]:false)
	    {
		return true;
	    }
            if (title == "")
	    {
		y2debug ("Removing section with empty title");
                return false;
	    }
            if (! contains (["linux", "failsafe", "memtest86"], title))
	    {
                return true;
	    }

	    string kernel = lookup_value (s, "kernel", "");
	    if (kernel == "")
		return true;
	    kernel = select (
		filter (`k, splitstring (kernel, " "), ``(k != "")), 0, "");
	    if (kernel == "")
		return true;
	    kernel = grub2file (kernel);
	    if (SCR::Read (.target.size, kernel) == -1)
	    {
		y2debug ("Removing section %1 with unexistent kernel",
		    title);
		return false;
	    }
	    return true;
	});
	BootCommon::sections = maplist (`s, BootCommon::sections, ``{
	    string title = lookup_value (s, "title", "");
	    map intern = lookup_value (s, "__intern__", $[]);
	    string kernel = lookup_value (s, "kernel", "");
	    if (intern["converted"]:false)
		return s;
            if (title == "linux" && kernel != "" && Mode::initial)
	    {
                s = modifySection (s, "kernel", BootCommon::updateKernelParams (
		    kernel));
	    }
	    string initrd = lookup_value (s, "initrd", "");
	    if (initrd != "")
	    {
		initrd = grub2file (initrd);
		if (-1 == SCR::Read (.target.size, initrd))
		    s = modify_section (s, "initrd", nil);
	    }
	    else if ((title == "linux" || title == "failsafe")
		&& BootCommon::write_settings["insert_initrd"]:false)
	    {
		if (title == "linux")
		    initrd = file2grub ("/boot/initrd");
		else
		    initrd = file2grub ("/boot/initrd.shipped");
		s = modifySection (s, "initrd", initrd);
	    }
	    return s;
	});
	string gfxmenu = lookup_value (
	    BootCommon::globals, "gfxmenu", "");
	if (gfxmenu != "")
	{
	    gfxmenu = grub2file (gfxmenu);
	    if (-1 == SCR::Read (.target.size, gfxmenu))
	    {
		BootCommon::addValueToBootloaderSection (`globals,
		    "gfxmenu", nil);
	    }
	}
	boolean ret = BootCommon::Save ();
	SCR::Execute (.target.bash, "/bin/chmod 600 /boot/grub/menu.lst");
	return ret;
    }
    /**
      * Update read settings to new version of configuration files
      */
    global define void Update () ``{
	updateSections (true);
	updateGlobals ();
    }
    /**
      * Write bootloader settings to disk
      * @return boolean true on success
      */
    global define boolean Write () ``{
	boolean ret = true;
	BootCommon::updateMBR ();
	if (BootCommon::location_changed)
	{
	    if (! (BootCommon::installingToFloppy () && saveToFLoppyPopup ()))
		ret = false;

	    // create backup copy first
	    if (BootCommon::createBackupBS ())
	    {
		y2milestone ("Creating backup copy to bootsector");
		// want a copy here
		map backup_gc = add (grub_conf, "device",
		    unixDev2grubDev (BootCommon::BootPartitionDevice));
		string conf_file = getGrubConf (backup_gc);
		string tmp_file = SCR::Read (.target.tmpdir) + "/grub.conf";
		SCR::Write (.target.string, tmp_file, conf_file);
		if (0 != SCR::Execute (.target.bash, sformat ("cat %1 \
| /usr/sbin/grub --batch --device-map=/boot/grub/device.map", tmp_file)))
		{
		    y2error ("Error occured while creating backup copy of bootloader bootsector");
		}
	    }


// save if mkfs or fdformat failed too
//	    if (ret)

	    // remove the log
	    SCR::Execute (.target.bash, "test -f /var/log/YaST2/y2loggrub && /bin/rm /var/log/YaST2/y2loggrub");
	    ret = 0 == SCR::Execute (.target.bash, "cat /etc/grub.conf \
| /usr/sbin/grub --batch --device-map=/boot/grub/device.map >> \
/var/log/YaST2/y2loggrub 2>&1"
	    );
	    if (ret)
	    {
		ret = 0 != SCR::Execute (.target.bash,
		    "/usr/bin/grep \"Error [0-9]*: \" /var/log/YaST2/y2loggrub");
	    }
	    if (! ret)
	    {
		string log = SCR::Read (.target.string,
		    "/var/log/YaST2/y2loggrub");
		// error popup - label
                errorWithLogPopup (_("Error occurred while installing GRUB"),
                    log);
	    }
	    else if (BootCommon::installingToFloppy ())
	    {
		BootCommon::updateTimeoutPopupForFloppy
		    (BootCommon::getLoaderName ("grub"));
	    }
	}
	return ret;
    }

    /**
      * Get map of bootloader options
      * @return map of options
      */
    global define map GetOptions () ``{
	return $[
	    `global: [
                "default",
                "fallback",
                "hiddenmenu",
                "timeout",
                "title",
		"gfxmenu",
		"timeout",
                "bootp",
                "color",
                "device",
                "dhcp",
                "hide",
                "ifconfig",
                "pager",
                "partnew",
                "parttype",
                "password",
                "rarp",
                "serial",
                "setkey",
                "terminal",
                "tftpserver",
                "unhide",


	    ],
	    "image" : [
                "bootp",
                "color",
                "device",
                "dhcp",
                "hide",
                "ifconfig",
                "pager",
                "partnew",
                "parttype",
                "password",
                "rarp",
                "serial",
                "setkey",
                "terminal",
                "tftpserver",
                "unhide",

                "blocklist",
                "boot",
                "cat",
                "cmp",
                "configfile",
                "debug",
                "displayapm",
                "displaymem",
                "embed",
                "find",
                "fstest",
                "geometry",
                "halt",
                "help",
                "impsprobe",
                "initrd",
                "install",
                "ioprobe",
                "kernel",
                "lock",
                "makeactive",
                "map",
                "md5crypt",
                "module",
                "modulenounzip",
                "pause",
                "quit",
                "reboot",
                "read",
                "root",
                "rootnoverify",
                "savedefault",
                "setup",
                "testload",
                "testvbe",
                "uppermem",
                "vbeprobe",

	    ],
	    "other" : [
                "bootp",
                "color",
                "device",
                "dhcp",
                "hide",
                "ifconfig",
                "pager",
                "partnew",
                "parttype",
                "password",
                "rarp",
                "serial",
                "setkey",
                "terminal",
                "tftpserver",
                "unhide",

                "blocklist",
                "boot",
                "cat",
                "chainloader",
                "cmp",
                "configfile",
                "debug",
                "displayapm",
                "displaymem",
                "embed",
                "find",
                "fstest",
                "geometry",
                "halt",
                "help",
                "impsprobe",
                "install",
                "ioprobe",
                "lock",
                "makeactive",
                "map",
                "md5crypt",
                "module",
                "modulenounzip",
                "pause",
                "quit",
                "reboot",
                "read",
                "root",
                "rootnoverify",
                "savedefault",
                "setup",
                "testload",
                "testvbe",
                "uppermem",
                "vbeprobe"
	    ],
	];
    }

// end of mandatory functions
//----------------------------------------------------------------------------

    /**
      * Create linux section
      * @param title strign section title (linux, failsafe, memtest)
      * @return section description structure
      */
    global define list createLinuxSection (string title) ``{
	if (title == "memtest86")
	{
	  if (Pkg::IsProvided ("memtest86") || ! Mode::normal)
	    return [
		$[ "key" : "kernel", "value" : file2grub ("/boot/memtest.bin")],
		$[ "key" : "title", "value" : "memtest86"],
		$[ "key" : "__intern__", "value" : $[
		    "auto" : true,
		    "changed" : false,
		    "devs" : [BootCommon::BootPartitionDevice],
		    "kernel" : "/boot/memtest.bin",
		]],
	    ];
	  else
		return $[];
	}
	if (title == "original MBR")
	{
            return [
                $[ "key" : "chainloader",
		   "value" : file2grub ("/boot/backup/mbr")],
                $[ "key" : "title", "value" : title],
                $[ "key" : "__intern__", "value" : $[
                    "auto" : true,
                    "changed" : false,
                    "devs" : [BootCommon::BootPartitionDevice],
                    "kernel" : "/boot/backup/mbr",
		    "original_mbr" : true,
                ]],
            ];
	}
	string vgastring = Kernel::vgaType != ""
	    ? sformat ("vga=%1", Kernel::vgaType)
	    : "";
	string initrd = title == "failsafe" ? "initrd.shipped" : "initrd";
	string image = title == "failsafe" ? "vmlinuz.shipped" : "vmlinuz";
	string append = title == "failsafe"
	    ? "showopts ide=nodma apm=off acpi=off vga=normal "
	      + ((Arch::x86_64) ? "iommu=noforce " : "nosmp noapic ")
	      + "maxcpus=0 3"
	    : sformat ("%1 %2 %3", vgastring, Kernel::cmdLine,
		"splash=silent showopts");
	return [
	    $[ "key" : "title", "value" : title],
	    $[ "key" : "kernel", "value" : sformat ("%1 %2 %3",
		file2grub ("/boot/" + image),
		sformat ("root=%1", BootCommon::dev2majminIfNonStandard (
		    BootCommon::RootPartitionDevice)),
		append
	    )],
	    $[ "key" : "initrd", "value" : file2grub ("/boot/" + initrd)],
	    $[ "key" : "__intern__", "value" : $[
		"changed" : false,
		"auto" : true,
		"devs" : [
		    BootCommon::BootPartitionDevice,
		    BootCommon::RootPartitionDevice
		],
		"kernel" : "/boot/" + image,
		"initrd" : "/boot/" + initrd,
	    ]]
	];
    }

    /**
      * Propose sections to bootloader menu
      * modifies internal sreuctures
      */
    global define void createSections () ``{
	y2debug ("Creating GRUB sections from scratch");
	list out = [
	    createLinuxSection ("linux")
	];
	list(string) others_ignore = [];
	list others = Storage::GetForeignPrimary();
	y2debug ("Other primaries: %1", others);
	list other_l = Storage::GetOtherLinuxPartitions();
	y2debug ("Other linux parts: %1", other_l);

	string tmpdir = SCR::Read (.target.tmpdir) + "/bldetect/";

	if (deep_propose && other_l != nil && size (other_l) > 0
	    && 0 == SCR::Execute (.target.bash, sformat (
		"test -d %1 || /bin/mkdir %1", tmpdir))
	    )
	{
	    y2milestone ("Detectig other Linux parts");
	    list filesystems = maplist (`p, other_l, ``(p["used_fs"]:""));
	    filesystems = toset (filter (`f, filesystems, ``(f != "")));
	    filesystems = filter (`f, filesystems, ``(f != `ext2));
	    y2debug ("Have to modprobe %1", filesystems);
	    foreach (`f, filesystems, ``{
		map fsmods = $[
		    `ext2 : "",
		    `ext3 : "ext3",
		    `reiser : "reiserfs",
		    `xfs : "xfs",
		    `jfs : "jfs"
		];
		string modname = fsmods[f]:"";
		y2debug ("Module name is %1", modname);
		if (modname != "")
		{
		    integer r = SCR::Execute (.target.bash,
			sformat ("/sbin/modprobe %1", modname));
		    y2debug ("result of loading %1 is %2", modname, r);
		}
	    });
	    foreach (`o, other_l, ``{
		string dev = o["device"]:"";
		if (dev != "" && 0 == SCR::Execute (.target.bash,
		    sformat ("/bin/mount %1 %2", dev, tmpdir)))
		{
		    y2milestone ("Mounted %1", dev);
		    list(string) filenames = [];
		    foreach (string fn, [
// not needed since there is a symlink in /boot directory
// named boot pointing to the /boot directory
// this caused bug #23346 - the file was found twice
//			tmpdir + "grub/menu.lst",
			tmpdir + "boot/grub/menu.lst"
		    ], ``{
			if (-1 != SCR::Read (.target.size, fn))
			    filenames = add (filenames, fn);
		    });
		    y2milestone ("Found files %1", filenames);
		    integer count = 0;
		    foreach (`f, filenames, ``{
			y2debug ("Checking file %1", f);
			string fc = SCR::Read (.target.string, f);
			SCR::Write (.grub.fromstring, fc);
			list sects = SCR::Dir (.grub.sections);
			y2debug ("Found sections %1", sects);
			count = count + size (sects);
			foreach (`s, sects, ``{
			    list opts_tmp = BootCommon::sectOptions2Map (
				"grub", "sections", s);
			    map intern = $[
				"changed" : false,
				"auto" : true,
				"converted" : true,
			    ];
			    opts_tmp = maplist (`o, opst_tmp, ``{
				if (o["key"]:"" == "title")
				    o["value"] = sformat ("%1_%2",
					dev, o["value"]:"");
				return o;
			    });
			    opts_tmp = filter (`o, opst_tmp, ``(o != nil));
			    list devs = [];
			    devs = add (devs, grubDev2unixDev (select (
				splitDevPath (
				    opts_tmp["initrd"]:""), 0, "")));
			    devs = add (devs, grubDev2unixDev (select (
				splitDevPath (
				    opts_tmp["kernel"]:""), 0, "")));
			    devs = add (devs, grubDev2unixDev (
				opts_tmp["root"]:""));
			    devs = add (devs,
				BootCommon::getKernelParamFromLine (
				    opts_tmp["kernel"]:"", "root"));
			    devs = filter (`d, devs, ``(d != ""
				&& d != nil
				&& d != "/dev/null" && d != "false"));
			    devs = toset (devs);
			    intern["devs"] = devs;
			    opts_tmp = add (opts_tmp, "__intern__", intern);
			    y2debug ("Converted sec: %1", opts_tmp);
			    out = add (out, opts_tmp);
			});
		    });
		    if (count > 0)
		    {
			others_ignore = add (others_ignore, dev);
		    }
		    SCR::Execute (.target.bash, sformat (
			"/bin/umount %1", dev));
		}
	    });
	    SCR::Execute (.target.bash, sformat ("/bin/rmdir %1", tmpdir));
	}

	if (others != nil)
	{
	    if (size (others) > 0)
	    {
		foreach (`o, others, ``{
		    list parts = splitstring (o, " ");
		    while (select (parts, 0, " ") == "")
			parts = remove (parts, 0);
		    string dev = select (parts, 0, "");
		    y2milestone ("Checking other partition %1", dev);
		    if (! contains (others_ignore, dev))
		    {
			string g_dev = unixDev2grubDev (dev);
			parts = remove (parts, 0);
			string label = mergestring (parts, " ");

                        // don't add rewritten location (#19990)
			if (g_dev != "" && label != ""
			    && dev != BootCommon::loader_device)
			{
			    list m = [
				$[ "key" : "title", "value" : label],
				$[ "key" : "root", "value" : g_dev],
// can bring problem if bootloader installed in bootsector of some partition
// new systems don't mind not having active partitions
//				$[ "key" : "makeactive", "value" : ""],
				$[ "key" : "chainloader", "value" : "+1"],
				$[ "key" : "__intern__", "value" : $[
				    "changed" : false,
				    "auto" : true,
				    "devs" : [dev],
				]],
			    ];
			   out = add (out, m);
			}
		    }
		});
	    }
	}
	if (BootCommon::installingToFloppy ())
	{
            out = add (out, [
                $[ "key" : "title", "value" : "hard disk"],
                $[ "key" : "root", "value" : "(hd0)"],
                $[ "key" : "chainloader", "value" : "+1"],
                $[ "key" : "__intern__", "value" : $[
		    "changed" : false,
                    "auto" : true,
                    "devs" : [],
                ]],
            ]);
	}
	else
	{
	    out = add (out, [
		$[ "key" : "title", "value" : "floppy"],
		$[ "key" : "root", "value" : "(fd0)"],
		$[ "key" : "chainloader", "value" : "+1"],
                $[ "key" : "__intern__", "value" : $[
                    "changed" : false,
                    "auto" : true,
                    "devs" : [],
                ]],
	    ]);
	}
	out = add (out, createLinuxSection ("failsafe"));
	out = add (out, createLinuxSection ("memtest86"));
	if (insert_saved_mbr
	    && ( BootCommon::backup_mbr
		|| 0 < SCR::Read (.target.size, "/boot/backup/mbr")))
	{
	    out = add (out, createLinuxSection ("original MBR"));
	}
	out = filter (`s, out, ``(s != $[] && s != nil));
	BootCommon::sections = out;
    }

    /**
      * Propose global options of bootloader
      * modifies internal structures
      */
    global define void createGlobals () ``{
	y2debug ("Creating GRUB globals from scratch");
	BootCommon::globals = [
	    $["key" : "color", "value" : "white/blue black/light-gray"],
	    $["key" : "default", "value" : 0],
	    $["key" : "timeout", "value" : 8],
	    $["key" : "gfxmenu", "value" : file2grub ("/boot/message")],
	    $["key" : "__intern__", "value" : $[
		"changed" : false,
	        "auto" : true,
	        "disks" : [BootCommon::BootPartitionDevice],
	    ]],
	];
    }

    /**
      * Update sections of bootloader menu
      * modifies internal sreuctures
      * @param replace boolean true if old sectinos shall be replaced
      */
    global define void updateSections (boolean replace) ``{
	list out = BootCommon::sections;

	foreach (`t, ["linux", "failsafe", "memtest86"], ``{
	    map m = createLinuxSection (t);
	    boolean changed = false;
	    list out = maplist (`s, out, ``{
		if (lookup_value (s, "title", "") == t)
		{
		    changed = true;
		    if (replace)
			return m;
		    else
			return s;
		}
		else
		{
		    return s;
		}
	    });
	    if (! changed)
		if (t == "normal")
		    out = prepend (out, m);
		else
		    out = add (out, m);
	});
	BootCommon::sections = out;
    }

    /**
      * Update global options of bootloader
      * modifies internal sreuctures
      */
    global define void updateGlobals () ``{
	BootCommon::addValueToBootloaderSection (
	    `globals, "color", "white/blue black/light-gray");
	BootCommon::addValueToBootloaderSection (
            `globals, "timeout", 8);
	BootCommon::addValueToBootloaderSection (
            `globals, "gfxmenu", file2grub ("/boot/message"));
    }

    /**
      * Fix sections of bootloader menu during proposal regeneration
      * modifies internal sreuctures
      * @param disks_changed boolean should be true if bootloader location
      *   relevant disk locations have changed
      */
    global define void fixSections (boolean disks_changed) ``{
	list parts = BootCommon::getPartitionList(`parts_old);
	if (BootCommon::partitioning_last_change
		!= Storage::GetTargetChangeTime()
	    && BootCommon::files_edited)
	{
	    displayFilesEditedPopup ();
	    BootCommon::files_edited = false;
	    return;
	}
	list old_sect_list = BootCommon::sections;
	createSections ();
	map new_sect = listmap (`s, BootCommon::sections, ``{
	    return [lookup_value (s, "title", ""), s];
	});
	old_sect_list = maplist (`s, old_sect_list, ``{
	    string title = s["title"]:"";
	    map intern = lookup_value (
		s, "__intern__", $[]);
	    if (! intern["auto"]:false)
	    {
		y2debug ("Leaving section %1 as is", title);
		return s;
	    }
	    else if (! intern["changed"]:false)
	    {
		y2debug ("Recreating section %1", title);
		return new_sect[title]:[];
	    }
	    else
	    {
		y2debug ("Possible warning on section %1", title);
		boolean cont = true;
		string title = lookup_value (
		    s, "title", "");
		// FIXME don't check title, but metadata
		if (title != "linux" && title != "failsafe"
		    && title != "memtest86" && title !="floppy"
		    && title != "original MBR")
		{
		    foreach (`n, intern["devs"]:[], ``{
		        if (! contains (parts, n))
		        {
			    cont = false;
		        }
		    });
		}
		list new_this_section = new_sect[title]:"";
		map new_this_intern = lookup_value(
		    new_this_section, "__intern__", $[]);
		list new_devs = toset(new_this_intern["devs"]:[]);
		list old_devs = toset(intern["devs"]:[]);
		if (size (new_devs) != size (old_devs))
		{
		    cont = false;
		}
		else
		{
		    foreach (`d, old_devs, ``{
			if (! contains (new_devs, d))
			    cont = false;
		    });
		}
		if (! cont)
		{
		    intern["auto"] = false;
		    y2milestone ("Warning, ND: %1, OD: %2, P: %3",
			new_devs, old_devs, parts);
		    displayDiskChangePopup (
			lookup_value (s, "title", ""));
		}
		s = maplist( `i, s, ``{
		    if (i["key"]:"" == "__intern__")
			i["value"] = intern;
		    return i;
		});
		return s;
	    }
	});
	boolean has_memtest = false;
	foreach (`s, old_sect_list, ``{
	    if (lookup_value (s, "title", "") == "memtest86")
	    {
		has_memtest = true;
	    }
	});
	if (new_sect["memtest86"]:[] != [] && ! has_memtest)
	    old_sect_list = add (old_sect_list, new_sect["memtest86"]:[]);
	y2milestone ("Checking for sections needing some of %1dd", del_parts);
	list(string) to_remove = [];
	foreach (`s, BootCommon::sections, ``{
	    map intern = lookup_value (
		s, "__intern__", $[]);
	    list(string) devs = intern["devs"]:[];
	    string title = lookup_value (
		s, "title", "");
	    y2milestone ("Section %1 needs %2", title, devs);
	    boolean to_add = false;
	    foreach (string d, devs, ``{
		if (contains (del_parts, d))
		{
		    to_add = true;
		}
	    });
	    if (to_add)
	    {
		map old_sect = listmap (`s, old_sect_list, ``{
		    return [title, s];
		});

		if (title != "" && ! haskey(old_sect, title))
		{
		    y2milestone ("Adding %1", s);
		    to_remove = add (to_remove, d);
		    old_sect_list = add (old_sect_list, s);
		}
	    }
	});
	del_parts = BootCommon::difflist (del_parts, to_remove);
	old_sect_list = filter (`s, old_sect_list, ``(s != []));
	BootCommon::sections = old_sect_list;
    }

    /**
      * Fix global options of bootloader during proposal regeneration
      * modifies internal sreuctures
      * @param disks_changed boolean should be true if bootloader location
      *   relevant disk locations have changed
      */
    global define void fixGlobals (boolean disks_changed) ``{
	if (size (BootCommon::sections) <= lookup_value (
	    BootCommon::globals, "default", 0))
	{
	    BootCommon::addValueToBootloaderSection (`globals, "default", 0);
	}
	map intern = lookup_value (
	    BootCommon::globals, "__intern__", $[]);
	if (lookup_value (
	    BootCommon::globals, "gfxmenu", "") == "")
	{
	    intern["auto"] = false;
	}
	if (lookup_value (
	    BootCommon::globals, "gfxmenu", "") != "")
	{
	    y2debug ("Have GFXMenu");
	    if (! intern["changed"]:false)
		BootCommon::addValueToBootloaderSection (
		    `globals, "gfxmenu", file2grub ("/boot/message"));
	    else if (intern["auto"]:false)
	    { // automatic, but changed
		if (BootCommon::BootPartitionDevice
		    != intern["disks", 0]:""
		    && ! intern["warned"]:false)
		{
		    intern["warned"] = true;
		    displayGfxMenuChangePopup ();
		}
	    }
	}
	BootCommon::addValueToBootloaderSection (`globals, "__intern__",
	    intern);
    }

    /**
      * Create strings representing cfg. files for by-hand editation
      * @return map filename -> contents
      */
    global define map GetFiles() ``{
	BootCommon::saveCfgFileToAgent ();
	grub_conf["device"] = unixDev2grubDev (BootCommon::loader_device);
	map ret = $[
	    "default" : "/boot/grub/menu.lst",
            "/boot/grub/menu.lst" : SCR::Read (.grub.tostring),
	    "/boot/grub/device.map" : devMap2string (device_map),
        ];
	if (! Mode::config)
	    ret["/etc/grub.conf"] = getGrubConf (grub_conf);
	return ret;
    }

    /**
      * Store strings representing cfg. files to internal structures
      * @param files map filename -> contents
      */
    global define void SetFiles (map files) ``{
	if ((devMap2string (device_map) != files["/boot/grub/device.map"]:"")
	    || (SCR::Read (.grub.tostring) != files["/boot/grub/menu.lst"]:""))
	{
	    BootCommon::files_edited = true;
	}
	device_map = string2devMap (files["/boot/grub/device.map"]:"");
	SCR::Write (.grub.fromstring, files["/boot/grub/menu.lst"]:"");
	if (! Mode::config)
	{
	    if (getGrubConf (grub_conf) != files["/etc/grub.conf"]:"")
	    {
	        BootCommon::files_edited = true;
	        BootCommon::location = "custom";
	    }
	    grub_conf = parseGrubConf (files["/etc/grub.conf"]:"");
	    BootCommon::loader_device =grubDev2unixDev (grub_conf["device"]:"");
	}
	BootCommon::loadCfgFileFromAgent ();
    }

    /**
      * Update bootlaoder configuration sequence
      * @param ws_data map of wizard sequencer data
      * @return map modified map of wizard sequencer data
      */
    global define map FixSequence (map ws_data) ``{
	map aliases = $[
	    "order" : ``(BootGRUB::runOrderDialog ())
	];
	map gs = ws_data["glob_seq"]:$[];
	map ts = gs["target"]:$[];
	gs["order"] = $[ `next : "target", `abort: `abort];
	ts = add (ts, `order, "order");
	gs["target"] = ts;
	ws_data["aliases"] = aliases;
	ws_data["glob_seq"] = gs;
	return ws_data;
    }

    /**
      * Convert section orig from type otype to ntype
      * Some information gets lost. ntype must be different from otype
      * @param otype string original section type, "image" or "other"
      * @param ntype string new section type, "image" or "other"
      * @param orig list original section
      * @return list new (converted) section
      */
    global define list convertSection (string otype, string ntype, list orig)``{
	list ret = [];
	if (orig == nil)
	{
	    if (ntype == "other")
	    {
		ret = [ $[ "key" : "root", "value" : ""],
			$[ "key" : "chainloader", "value" : ""]];
	    }
	    else
	    {
		ret = [ $[ "key" : "root", "value" : ""],
                        $[ "key" : "kernel", "value" : ""],
			$[ "key" : "initrd", "value" : ""]];
	    }
	    ret = add (ret, $[ "key" : "title",
		"value" : BootCommon::getFreeSectionLabel ()]);
	    return ret;
	}
	map title_map = getValueMap (orig, "title");
	if (ntype == "other")
	{
	    string root = select (splitDevPath (
		lookup_value (orig, "kernel", "")),
		0,"");
            root = lookup_value (
		orig, "root", root);
	    if (root == nil)
		root = "";
	    ret = [
		$[ "key" : "root", "value" : root],
		$[ "key" : "chainloader", "value" : "+1"]
	    ];
	}
	else
	{
	    string root = lookup_value (orig, "root", "");
	    ret = [
                $[ "key" : "root", "value" : root],
                $[ "key" : "kernel", "value" : sformat ("/vmlinuz root=%1",
		    grubDev2unixDev (root))],
		$[ "key" : "initrd", "value" : "/initrd"]
	    ];
	}
	ret = add (ret, title_map);
	return ret;
    }

}
