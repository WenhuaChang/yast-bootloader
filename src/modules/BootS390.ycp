/**
 * File:
 *      modules/BootS390.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Module containing specific functions for S390 configuration
 *      and installation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{
    module "BootS390";

    textdomain "bootloader";

    import "Kernel";
    import "Storage";
    import "Product";
    import "StorageControllers";
    import "BootCommon";
    import "Mode";

    include "bootloader/routines/popups.ycp";
    include "bootloader/routines/routines.ycp";

// misc. functions

    /**
      * Empty summary dialog
      * @return symbol always `back
      */
    global define symbol runSummaryDialog () ``{
	displayNoSupportPopup ();
	return `back;
    }

// general functions

    /**
      * Propose bootloader settings
      */
    global define void Propose () ``{
	string root_device = BootCommon::RootPartitionDevice;
	string parameters = sformat ("\"%1 root=%2\"",
	    StorageControllers::dasdParam,
	    root_device);

	BootCommon::DetectDisks ();
	BootCommon::globals = [];
	BootCommon::sections = [
	    [
		$[ "key" : "label", "value" : "defaultboot" ],
		$[ "key" : "default", "value" : "ipl" ],
	    ],
	    [
		$[ "key" : "label", "value" : "ipl" ],
		$[ "key" : "target", "value" : "/boot/zipl" ],
		$[ "key" : "image", "value" : "/boot/kernel/image" ],
		$[ "key" : "ramdisk", "value" : "/boot/initrd" ],
		$[ "key" : "parameters", "value" : parameters ],
	    ],
	    [
		$[ "key" : "label", "value" : "dumpdasd" ],
		$[ "key" : "target", "value" : "/boot/zipl" ],
		$[ "key" : "dumpto", "value" : "/dev/dasd??" ],
	    ],
	    [
		$[ "key" : "label", "value" : "dumptape" ],
		$[ "key" : "target", "value" : "/boot/zipl" ],
		$[ "key" : "dumpto", "value" : "/dev/rtibm0" ],
	    ],
	];
    }

    /**
      * Read settings from disk
      * @return boolean true on success
      */
    global define boolean Read () ``{
	BootCommon::DetectDisks ();
	BootCommon::changed = true;
	return BootCommon::Read ();
    }

    /**
      * Save all bootloader configuration files
      * @return boolean true if success
      */
    global define boolean Save () ``{
	y2milestone ("Saving S390 cfg. file");
	boolean ret = BootCommon::Save ();

	if (Mode::normal)
	    return ret;

	// append chandev to /etc/chandev.conf
	string chandev = (string)SCR::Read(.etc.install_inf.Chandev);
	if( chandev == nil )
	{
	    chandev = "";
	}

	if (chandev != ""
	    && (SCR::Read (.target.size, "/etc/chandev.conf") == -1))
	{
	    ret = ret && (0 == SCR::Execute (.target.bash,
		"/bin/echo '"+chandev+"' >> /etc/chandev.conf"));
	}
	return ret;
    }

    /**
      * Display bootloader summary
      * @return a list of summary lines
      */
    global define list<string> Summary () ``{
	// summary
	return [_("Install S390 Boot Loader")];
    }

    /**
      * Update read settings to new version of configuration files
      */
    global define void Update () ``{
	y2milestone ("No update functionality implemented");
    }

    /**
      * Write bootloader settings to disk
      * @return boolean true on success
      */
    global define boolean Write () ``{
	string bl_command = "/sbin/zipl > /var/log/YaST2/y2logzipl 2>&1";
	string bl_logfile = "/var/log/YaST2/y2logzipl";
	return BootCommon::installBootLoader (bl_command, bl_logfile);
    }

    /**
      * Update bootlaoder configuration sequence
      * @param ws_data map of wizard sequencer data
      * @return map modified map of wizard sequencer data
      */
    global define map FixSequence (map ws_data) ``{
        map aliases = $[
	    "summary" : ``(BootS390::runSummaryDialog ()),
        ];
        ws_data["aliases"] = aliases;
        return ws_data;
    }

    /**
      * Get the list of all dump devices
      * @return list of all dump devices, as list of maps containg keys
      *  "label", "target" and "dumpto"
      */
    global define list GetDumpDevices () ``{
	list dd = maplist (list d, BootCommon::sections, ``(
	    listmap (map e, d, ``(
		$[ e["key"]:"": e["value"]:"" ]
	    ))
	));
	return filter (map s, dd, ``(
	    s["dumpto"]:"" != ""
	));
    }

    /**
      * Set the list of all dump devices
      * @param dump_devices list in the same form as result of GetDumpDevices ()
      */
    global define void SetDumpDevices (list dump_devices) ``{
	BootCommon::sections = filter (list<map> s, BootCommon::sections, ``(
	    lookup_value (s, "dumpto", "") == ""
	));
	dump_devices = maplist (map d, dump_devices, ``{
	    if (d["dumpto"]:"" == "")
		return nil;
	    if (d["target"]:"" == "")
		d["target"] = "/boot/zipl";
	    if (d["label"]:"" == "")
		d["label"] = "dump" + filterchars (d["dumpto"]:"", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
	    return d;
	});
	dump_devices = filter (map d, dump_devices, ``(d != nil));
	list<list<map> > dd = maplist (map d, dump_devices, ``(
	    (list<map>)maplist (string k, string v, d, ``(
		$[ "key" : k, "value" : v ]
	    ))
	));
	BootCommon::sections = (list<list<map> >)merge (BootCommon::sections, dd);
    }

    /**
      * Return map of provided functions
      * @return map map of functions (eg. $["write":``(BootS390::Write ())])
      */
    global define map<string, any> GetFunctions () ``{
	return $[
	    "read"	: BootS390::Read,
	    "propose"	: BootS390::Propose,
	    "save"	: BootS390::Save,
	    "summary"	: BootS390::Summary,
	    "update"	: BootS390::Update,
	    "write"	: BootS390::Write,
	    "sequence"	: BootS390::FixSequence,
	];
    }

    /**
      * Initializer of S390 bootloader
      */
    global define void Initializer () ``{
	y2milestone ("Called S390 (zipl) initializer");
	BootCommon::current_bootloader_attribs = $[
	    "section_title" : "label",
	    "kernel_key" : "image",
	    "propose" : true,
	    "read" : true,
	    "scratch" : true,
	];
	// TODO no UI available yet
	BootCommon::cwm_options = (map<string, any>) union (
	    BootCommon::GetOptionMaps (),
	    $[]);//BootS390::GetOptionMaps ());
	BootCommon::cwm_widgets = union (
	    BootCommon::GetWidgetMaps (),
	    $[]);//BootS390::GetWidgetMaps ());
    }


    /**
      * Constructor
      */
    global define void BootS390 () ``{
	BootCommon::bootloader_attribs["s390"] = $[
            "loader_name" : "zipl",
	    "required_packages" : [], // FIXME
	    "initializer" : BootS390::Initializer,
        ];
    }

}
