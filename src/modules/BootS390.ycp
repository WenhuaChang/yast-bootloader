/**
 * File:
 *      modules/BootS390.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Module containing specific functions for S390 configuration
 *      and installation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{
    module "BootS390";

    textdomain "bootloader";

    import "Kernel";
    import "Storage";
    import "Product";
    import "StorageControllers";
    import "BootCommon";

    include "bootloader/routines/popups.ycp";

// general functions

    /**
      * Return map of provided functions
      * @return map map of functions (eg. $["write":``(BootLILO::Write ())])
      */
    global define map GetFunctions () ``{
	return $[
	    "read" :	``(BootS390::Read ()),
	    "propose" : ``(BootS390::Propose ()),
	    "save" :	``(BootS390::Save ()),
	    "summary" :	``(BootS390::Summary ()),
	    "update" :	``(BootS390::Update ()),
	    "write" :	``(BootS390::Write ()),
	    "sequence" :``(BootS390::FixSequence ()),
	];
    }
    /**
      * Propose bootloader settings
      */
    global define void Propose () ``{
	BootCommon::DetectDisks ();
	BootCommon::globals = $[];
	BootCommon::sections = [
	    $["__order__":["label", "default"],
		"default":"ipl", "label":"defaultboot"],
	    $["__order__":["label", "target", "image", "ramdisk", "parameters"],
		"image":"/boot/kernel/image",
		"label":"ipl",
		"parameters":" root=/dev/hda3",
		"ramdisk":"/boot/initrd",
		"target":"/boot/zipl"],
	    $["__order__":["label", "target", "dumpto"],
		"dumpto":"/dev/dasd??",
		"label":"dumpdasd",
		"target":"/boot/zipl"],
	    $["__order__":["label", "target", "dumpto"],
		"dumpto":"/dev/rtibm0",
		"label":"dumptape",
		"target":"/boot/zipl"]];

	string root_device = BootCommon::RootPartitionDevice;
	BootCommon::sections[1, "parameters"] = sformat ("\"%1 root=%2\"",
	    StorageControllers::dasdParam,
	    root_device);
    }

    /**
      * Read settings from disk
      * @return boolean true on success
      */
    global define boolean Read () ``{
	BootCommon::DetectDisks ();
	BootCommon::changed = true;
	return BootCommon::Read ();
    }

    /**
      * Save all bootloader configuration files
      * @return boolean true if success
      */
    global define boolean Save () ``{
	y2milestone ("Saving S390 cfg. file");
/*	string root_device = BootCommon::RootPartitionDevice;

	string zipl_conf = "# Generated by YaST2
[defaultboot]
default=ipl

[ipl]
target=/boot/zipl
image=/boot/kernel/image
ramdisk=/boot/initrd
parameters=\"" + StorageControllers::dasdParam + " root=" + root_device;

	zipl_conf = zipl_conf + "\"

[dumpdasd]
target=/boot/zipl
dumpto=/dev/dasd??

[dumptape]
target=/boot/zipl
dumpto=/dev/rtibm0
";

	boolean ret = SCR::Write (.target.string, "/etc/zipl.conf", zipl_conf);
*/

	boolean ret = BootCommon::Save ();

	if (Mode::normal)
	    return ret;

	// append chandev to /etc/chandev.conf
	string chandev = SCR::Read(.etc.install_inf.Chandev);
	if( chandev == nil )
	{
	    chandev = "";
	}

	if (chandev != "")
	{
	    ret = ret && (0 == SCR::Execute (.target.bash,
		"/bin/echo '"+chandev+"' >> /etc/chandev.conf"));
	}
	return ret;
    }

    /**
      * Display bootloader summary
      * @return a list of summary lines
      */
    global define list(string) Summary () ``{
	return [_("Install S390 Boot Loader")];
    }

    /**
      * Update read settings to new version of configuration files
      */
    global define void Update () ``{
    }

    /**
      * Write bootloader settings to disk
      * @return boolean true on success
      */
    global define boolean Write () ``{
	string efi_label = Product::name;
	boolean ret = true;

	ret = 0 == SCR::Execute (.target.bash,
	    "/sbin/zipl > /var/log/YaST2/y2logzipl 2>&1");

	if (! ret)
	{
		string log = SCR::Read (.target.string,
		    "/var/log/YaST2/y2logzipl");
		errorWithLogPopup (_("Error occurred while installing S390 boot loader."), log);
	}
	return ret;
    }

    /**
      * Update bootlaoder configuration sequence
      * @param ws_data map of wizard sequencer data
      * @return map modified map of wizard sequencer data
      */
    global define map FixSequence (map ws_data) ``{
        map aliases = $[
	    "summary" : ``(BootS390::runSummaryDialog ()),
        ];
        ws_data["aliases"] = aliases;
        return ws_data;
    }



// end of mandatory functions
//----------------------------------------------------------------------------

    /**
      * Empty summary dialog
      * @return symbol always `back
      */
    global define symbol runSummaryDialog () ``{
	displayNoSupportPopup ();
	return `next;
    }
}
