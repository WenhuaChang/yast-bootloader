/**
 * File:
 *      include/bootloader/ppc/misc.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Miscelaneous functions for configuring and installing PPC bootloader
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{

    import "Storage";
    import "BootCommon";

    /**
      * Update list of 41 PReP boot partitions
      * @return boolean true if list changed, false otherwise
      */
    global define boolean updatePrepBootPartitions () ``{
	map targetMap = Storage::GetTargetMap ();
	list old_prep_boot_partitions = prep_boot_partitions;
	y2milestone("old prep_boot_partitions %1", old_prep_boot_partitions);

	foreach (string dname, map ddata, targetMap, ``{
	    list partitions = ddata["partitions"]:[];
	    partitions = filter (map p, partitions, ``(
		(! p["delete"]:false)
		&& (p["fsid"]:"" == 65)
		&& (! p["is_lv"]:false)
		&& (p["raid_type"]:"" == "")
	    ));
	    if (prep_only_active)
	    {
		partitions = filter (map p, partitions, ``(
		    p["boot"]:false
		));
	    }
	    if (prep_only_hdx)
	    {
		partitions = filter (map p, partitions, ``(
		    regexpmatch (p["device"]:"", "\/dev\/hd.*")
		));
	    }
	    if (prep_only_primary)
	    {
		partitions = filter (map p, partitions, ``(
		    p["type"]:`primary == `primary
		));
	    }
	    prep_boot_partitions = maplist (map p, partitions, ``(
		p["device"]:""
	    ));
	    prep_boot_partitions = filter (string p, prep_boot_partitions, ``(
		p != ""
	    ));
	});
	prep_boot_partitions = sort (prep_boot_partitions);
	y2milestone ("Detected PReP partitions: %1", prep_boot_partitions);

	if (old_prep_boot_partitions == prep_boot_partitions)
	{
	    y2milestone ("PReP Partitions unchanged");
	    return false;
	}
	else
	{
	    y2milestone ("PReP Partitions changed");
	    return true;
	}
    }

    /**
      * Select PReP boot partition to propose
      * Changes internal variables.
      */
    global define void choosePrepBootPartition () ``{
	y2milestone ("Resetting selected PReP boot partition");
	string root_disk			// FIXME what about LVM?
	    = lookup (Storage::GetDiskPartition (
		BootCommon::RootPartitionDevice), "disk", "");

	prep_boot_partition = "";
	foreach (string partition, prep_boot_partitions, ``{
	    if (prep_boot_partition == "")
	    {
		boolean usable = true;
		if (prep_same_disk_as_root)
		{
		    map part_split = Storage::GetDiskPartition (partition);
		    string part_disk = part_split["disk"]:"";
		    if (part_disk != root_disk)
			usable = false;
		}
		if (usable)
		    prep_boot_partition = partition;
	    }
	});
    }

    /**
      * Get name of the currently used board
      * @return string the name of the board
      */
    global define string getNameOfCurrentBoard () ``{
	if ( Arch::board_iseries )
	{
	    // part of summary
	    return "iSeries";
	}
	else if ( Arch::board_prep )
	{
	    // part of summary
	    return "PReP";
	}
	else if ( Arch::board_chrp )
	{
	    // part of summary
	    return "CHRP";
	}
	else if ( Arch::board_mac_new )
	{
	    // part of summary
	    return _("New World Power Macintosh");
	}
	else if ( Arch::board_mac_old )
	{
	    // part of summary
	    return _("Old World Power Macintosh");
	}
	else if ( Arch::board_mac_nubus )
	{
	    // part of summary
	    return "Nubus";
	}
	// part of summary
	return _("Unknown");
    }


}
