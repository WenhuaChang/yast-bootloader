/**
 * File:
 *      bootloader.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Main file of bootloader configuration
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */
{
    textdomain "bootloader";
    import "Arch";
    import "BootCommon";
    import "Bootloader";
    import "Mode";
    import "Progress";
    import "Wizard";

    include "bootloader/routines/helps.ycp";

    /**
     * Test for abort.
     * @return true if abort was pressed
     */
    define boolean testAbort () ``{
        if (`abort == UI::PollInput ())
        {
            UI::CloseDialog ();
            return true;
        }
        return false;
    }

    y2milestone ("Starting bootloader configuration module");
    boolean skip_io = false;
    integer i = 0;
    while (i < size ((list)WFM::Args()))
    {
	if (.noio == WFM::Args (i) || ".noio" == WFM::Args (i))
	{
	    skip_io = true;
	    BootCommon::save_on_finish = false;
	}
	i = i + 1;
    }

    Wizard::CreateDialog ();

    if (! skip_io)
    {
// run Progress bar
	list stages = [
	    // progress stage, text in dialog (short, infinitiv)
	    _("Check boot loader"),
	    // progress stage, text in dialog (short, infinitiv)
	    _("Read partitioning"),
	    // progress stage, text in dialog (short, infinitiv)
	    _("Load boot loader settings"),
	];
	list titles = [
	    // progress stage, text in dialog (short)
	    _("Checking boot loader..."),
	    // progress stage, text in dialog (short)
	    _("Reading partitioning..."),
	    // progress stage, text in dialog (short)
	    _("Loading boot loader settings..."),
	];
	// progress bar caption
	Progress::New (_("Initializing boot loader configuration tool..."),
	    " ", 3, stages, titles, getInitProgressHelp ());

	Progress::NextStage ();
	if (testAbort ())
	    return `back;

	Bootloader::getLoaderType ();

	Progress::NextStage ();
	if (testAbort ())
	    return `back;

	BootCommon::DetectDisks ();
        Progress::NextStage ();
        if (testAbort ())
            return `back;

	Bootloader::Read ();
	Progress::Finish ();
	if (testAbort ())
	    return `back;
    }

    symbol ret = Bootloader::runWizard ();

    if (! skip_io)
    {
	if (ret == `next)
	    Bootloader::Write ();
    }

    UI::CloseDialog ();
    y2milestone ("Finishing bootloader configuration module");
    return ret;
}
