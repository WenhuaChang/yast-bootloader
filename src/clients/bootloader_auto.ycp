/**
 * File:
 *      bootloader_auto.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Bootloader autoinstallation preparation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */
{
    textdomain "bootloader";

    y2milestone("----------------------------------------");
    y2milestone("bootloader auto started");

    import "Bootloader";
    import "BootCommon";
    import "Wizard";
    import "Installation";
    import "Mode";
    import "Summary";
    include "bootloader/routines/ui.ycp";


    any ret = nil;
    string func = "";
    map param = $[];

    /* Check arguments */
    if(size(Args()) > 0 && is(Args(0), string)) {
	func = WFM::Args(0);
	if(size(Args()) > 1 && is(Args(1), map))
	    param = WFM::Args(1);
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);


    if(func == "Import")
    {
	list modlist = [];
	map modsett = $[];
	foreach(map mod, param["initrd_modules"]:[], ``{
		modlist = add(modlist, mod["module"]:"");
		modsett = add(modsett, mod["module"]:"", mod["module_args"]:"");
	});
	if (size(modlist) > 0 )
		param["initrd"] = $[ "list": modlist, "settings" : modsett ];

	// cleanup
	if (haskey(param, "initrd_modules"))
		param = remove(param, "initrd_modules");

	ret = Bootloader::Import(param);
    }
    /**
      * Create a summary
      * return string
      */
    else if(func == "Summary") {
	ret = "<UL>"
            + mergestring (maplist (`l, Bootloader::Summary(), ``("<LI>" + l)),
            "\n")
            + "</UL>";
    }
    /**
      * Reset configuration
      * return map or list
      */
    else if (func == "Reset") {
	Bootloader::Reset();
	ret =  ($[]);
    }
    /**
      * Change configuration
      * return symbol (i.e. `finish || `accept || `next || `cancel || `abort)
      */
    else if (func == "Change") {
	Wizard::CreateDialog ();
    ret = runWizard ();
    UI::CloseDialog ();
	return ret;
    }
    /**
      * Return configuration data
      * return map or list
      */
    else if (func == "Export") {
	ret = Bootloader::Export();
	list ayinitrd = maplist(`m, ret["initrd", "list"]:[], ``{
		map tmp = $[];
		tmp["module"] = m;
		if (ret["initrd", "settings", m]:"" != "")
			tmp["module_args"] = ret["initrd", "settings", m]:"";
		return (tmp);
	});
	if (haskey(ret, "initrd"))
		ret = remove(ret, "initrd");

	if (size(ayinitrd) > 0 )
		ret["initrd_modules"] = ayinitrd;

	ret = filter (`k, `v, ret, ``(k != "changed_settings"));
    }
    /**
      * Write configuration data
      * return boolean
      */
    else if (func == "Write") {
	ret = Bootloader::Write();
    }
    else if (func == "Read") {
	Initrd::Read ();
	ret = Bootloader::Read();
    }

    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret =  false;
    }

    y2debug("ret=%1", ret);
    y2milestone("bootloader_auto finished");
    y2milestone("----------------------------------------");

    return ret;

/* EOF */

}
