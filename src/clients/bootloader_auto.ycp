/**
 * File:
 *      bootloader_auto.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Bootloader autoinstallation preparation
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */
{
    textdomain "bootloader";

    y2milestone("----------------------------------------");
    y2milestone("bootloader auto started");

    import "Bootloader";
    import "BootCommon";
    import "Wizard";
    import "Installation";
    import "Mode";
    import "Summary";
    include "bootloader/routines/ui.ycp";


    any ret = nil;
    string func = "";
    map param = $[];

    /* Check arguments */
    if(size(Args()) > 0 && is(Args(0), string)) {
	func = WFM::Args(0);
	if(size(Args()) > 1 && is(Args(1), map))
	    param = WFM::Args(1);
    }
    y2debug("func=%1", func);
    y2debug("param=%1", param);


    if(func == "Import") {
	y2debug ("Importing settings %1", param);
	map initrd = param["initrd"]:$[];
	list modules = initrd["list"]:[];
	map mod_settings = initrd["settings"]:$[];
	foreach (`m, modules, ``{
	    Initrd::AddModule (m, mergestring (mod_settings[m]:[], " "));
	});
	param["initrd"] = nil;
	y2debug ("Starting importing settings");
	ret = Bootloader::Import(param);
	y2debug ("Importing done, result %1", Bootloader::Export ());
	BootCommon::DetectDisks ();
	y2debug ("Proposing - fix");
	Bootloader::Propose ();
	y2debug ("Proposing done");
	// fix GRUB's device names
	if (Bootloader::getLoaderType () == "grub")
	{
	    import "BootGRUB";
	    string gfxmenu = BootCommon::globals["gfxmenu"]:"";
	    if (gfxmenu != "")
		BootCommon::globals["gfxmenu"] = BootGRUB::file2grub (gfxmenu);
	    BootCommon::sections = maplist (`s, BootCommon::sections, ``{
		string initrd = s["initrd"]:"";
		if (initrd != "" && substring(initrd, 0, 1) == "/")
		{
		    s["initrd"] = BootGRUB::file2grub (initrd);
		}
		string kernel = s["kernel"]:"";
		if (kernel != "" && substring (kernel, 0, 1) == "/")
		{
		    list(string) parts = splitstring (kernel, " ");
		    parts = filter (`p, parts, ``(p != ""));
		    kernel = parts[0]:"";
		    parts[0] = BootGRUB::file2grub (kernel);
		    s["kernel"] = mergestring (parts, " ");
		}
		return s;
	    });
	}
	// fix root partitions
	y2milestone ("Fixing partitions");
	foreach (`s, ["linux", "failsafe"], ``{
	    string root = Bootloader::getKernelParam (s, "root");
	    y2milestone ("Section %1 has root %2", s, root);
	    if (root == "true" || root == "false" || root == "")
	    {
		y2milestone ("Setting root of %1 to %2", s, BootCommon::RootPartitionDevice);
		Bootloader::setKernelParam (s, "root",
		    BootCommon::RootPartitionDevice);
	    }
	});
    }
    /**
      * Create a summary
      * return string
      */
    else if(func == "Summary") {
	ret = "<UL>"
            + mergestring (maplist (`l, Bootloader::Summary(), ``("<LI>" + l)),
            "\n")
            + "</UL>";
    }
    /**
      * Reset configuration
      * return map or list
      */
    else if (func == "Reset") {
	Bootloader::Reset();
	ret =  ($[]);
    }
    /**
      * Change configuration
      * return symbol (i.e. `finish || `accept || `next || `cancel || `abort)
      */
    else if (func == "Change") {
	Wizard::CreateDialog ();
    ret = runWizard ();
    UI::CloseDialog ();
	return ret;
    }
    /**
      * Return configuration data
      * return map or list
      */
    else if (func == "Result") {
	ret = Bootloader::Export();
	ret = filter (`k, `v, ret, ``(k != "changed_settings"));
    }
    /**
      * Write configuration data
      * return boolean
      */
    else if (func == "Write") {
	ret = Bootloader::Write();
    }
    else if (func == "Read") {
	ret = Bootloader::Read();
    }

    /* unknown function */
    else {
	y2error("unknown function: %1", func);
	ret =  false;
    }

    y2debug("ret=%1", ret);
    y2milestone("bootloader_auto finished");
    y2milestone("----------------------------------------");

    return ret;

/* EOF */

}
