/**
 * Module:		bootloader_proposal.ycp
 *
 * $Id$
 *
 * Author:		Klaus Kaempf <kkaempf@suse.de>
 *
 * Purpose:		Proposal function dispatcher - bootloader.
 *
 *			See also file proposal-API.txt for details.
 */
{
    textdomain "bootloader";

    import "Language";
    import "Arch";
    import "Bootloader";
    import "BootCommon";

    include "ui/common_popups.ycp";
    include "bootloader/routines/ui.ycp";

    string func  = WFM::Args(0);
    map    param = WFM::Args(1);
    map    ret   = $[];

    if ( func == "MakeProposal" )
    {
	boolean force_reset      = param["force_reset"     ]:false;
	boolean language_changed = param["language_changed"]:false;

	if (force_reset && !Mode::autoinst)
	{
	    // force re-calculation of bootloader proposal
	    Bootloader::Reset ();
	}

	if (! Bootloader::proposed_cfg_changed)
	{
	    Bootloader::Reset ();
	    BootCommon::setLoaderType (nil);
	}
	else if (Arch::i386 || Arch::x86_64)
	{
	    string loader = BootCommon::getLoaderType (false);
	    boolean pl = BootCommon::prefer_lilo;
	    string new_l = BootCommon::getLoaderType (true);

	    y2milestone ("PL: %1, L: %2, NL: %3, NPL: %4", pl, loader, new_l, BootCommon::prefer_lilo);

	    if (pl != BootCommon::prefer_lilo && new_l != loader)
	    {
		symbol ret = nil;
		if ((pl && new_l != "lilo") || (! pl && new_l == "lilo"))
		{
		    ret = askSwitch (loader, new_l, `proposal);
		}
		if (ret == nil)
		{
		    BootCommon::setLoaderType (loader);
		}
		else if (ret == `propose)
		{
		    Bootloader::Reset ();
		}
		else if (action == `convert)
		{
		    convertSettings (old_bl, new_bl);
		}
	    }
	}

	Bootloader::Propose ();
	// to make sure packages will get installed
	BootCommon::setLoaderType (BootLoader::getLoaderType (false));

	ret = $[ "raw_proposal" : Bootloader::Summary ()];

	if (Bootloader::getLoaderType () == "")
        {
            y2error ("No bootloader selected");
            ret = add (ret, "warning_level", `error);
	    // warning text in the summary rixhtext
            ret = add (ret, "warning", _("No boot loader is selected for installation. Your system might not be bootable."));
        }


    }
    else if ( func == "AskUser" )
    {
	boolean has_next = param["has_next"]:false;

	map settings = Bootloader::Export ();
	symbol result = WFM::CallFunction (`bootloader (.noio));
	if (result != `next)
	    Bootloader::Import (settings);
	else
	    Bootloader::proposed_cfg_changed = true;

	// Fill return map
	ret = $[ "workflow_sequence" : result ];
    }
    else if ( func == "Description" )
    {
	// Fill return map.
	//
	// Static values do just nicely here, no need to call a function.

	ret =
	    $[
		// proposal part - bootloader label
	      "rich_text_title"	:	_("Booting"),
		// menubutton entry
	      "menu_title"	:	_("&Booting"),
	      "id"		:	"bootloader_stuff"
	    ];
    }
    else if (func == "Write")
    {
	boolean succ = Bootloader::Write ();
	ret =
	    $[
		"success"	:	succ
	    ];
    }

    return ret;
}
