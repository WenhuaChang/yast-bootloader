/**
 * File:
 *      include/bootloader/grub/misc.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Miscelaneous functions for configuring and installing GRUB bootloader
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */

{
    textdomain "bootloader";
    import "Storage";
    import "StorageDevices";
    import "Mode";
    import "BootCommon";

    /**
      * Encrypt the password before storing it in variables
      * @param passwd string unencrypted password
      * @return string password in the form to write to GRUB's menu.lst
      */
    global define string updatePasswdBeforeSave (string passwd) ``{
	passwd = sformat ("--md5 %1", cryptmd5 (passwd));
	return passwd;
    }

    /**
      * generate string from device map list
      * @param devmap list device map
      * @return string device map as string to save to file
      */
    global define string devMap2string (list<list<string> > devmap) ``{
        string res = "";
        foreach (list<string> m, devmap, ``{
            res = res + m[0]:"" + "\t" + m[1]:"" + "\n";
        });
	return res;
    }

    /**
      * parse device map string to device-map list
      * @param s_map string device map as string read from file
      * @return list device map
      */
    global define list<list<string> > string2devMap (string s_map) ``{
        list<string> lines = splitstring (s_map, "\n");
        lines = filter (string l, lines, ``(l != ""));
        list<list<string> > devmap = maplist (string l, lines, ``(splitstring (l, " \t")));
        devmap = maplist (list<string> l, devmap,
	    ``(filter (string e, l, ``(e != ""))));
	return devmap;
    }

    /**
      * Read GRUB device maping from /boot/grub/device.map file
      * @return list of lists like
      * [["(hd0)", "/dev/hda"], ["(fd0)", "/dev/fd0"]]
      */
    global define list<list<string> > readDeviceMap () ``{
	string s_map = (string)
	    SCR::Read (.target.string, "/boot/grub/device.map");
	list<list<string> > devmap = string2devMap (s_map);
	y2milestone ("Read device map: %1", devmap);
	return devmap;
    }

    /**
      * Save GRUB device map to file readable for GRUB
      * @param devmap list device map the same way as read with readDeviceMap
      * @return boolean true on success
      */
    global define boolean saveDeviceMap (list<list<string> > devmap) ``{
	string res = devMap2string (devmap);
	return SCR::Write (.target.string, "/boot/grub/device.map", res);
    }

    /**
      * Generate device map proposal
      * @return list generated device map
      */
    global define list<list<string> > proposeDeviceMap () ``{
	map ids = $[];
	list<list<string> > mapping = [];
        map<string,map> targetMap = $[];
	if (Mode::config)
	{
	    y2milestone ("Skipping device map proposing in Config mode");
/*	    import "AutoinstStorage";
	    targetMap = listmap (map d, AutoinstStorage::drives, ``(
		[d["device"]:"", d]
	    ));
	    targetMap = filter (any k, any v, targetMap, ``(k != ""));
	    y2debug ("Autoinst device map: %1", targetMap);
*/	}
	else
	{
	    targetMap = (map<string,map>)Storage::GetTargetMap();
	}
	targetMap = filter (string k, map v, targetMap, ``(
	    ! v["is_lvm_vg"]:false && ! issubstring (k, "/dev/md")
	));
	y2debug ("Target map: %1", targetMap);
	// add devices with know bios_id
        foreach (string target_dev, map target, targetMap, ``{
            string bios_id = target["bios_id"]:"";
            if (bios_id != "")
            {
		integer index = tointeger (bios_id) - tointeger ("0x80");
                string grub_dev = sformat ("(hd%1)", index);
                mapping = add (mapping, [grub_dev, target_dev]);
		ids[index] = true;
            }
        });
	// and guess other devices
	foreach (string target_dev, map target, targetMap, ``{
            string bios_id = target["bios_id"]:"";
            if (bios_id == "")
            {
		integer index = 0;
		while (ids[index]:false)
		    index = index + 1;
                string grub_dev = sformat ("(hd%1)", index);
                mapping = add (mapping, [grub_dev, target_dev]);
		ids[index] = true;
            }
        });
	if (StorageDevices::FloppyPresent)
	{
	    mapping = add (mapping, ["(fd0)", StorageDevices::FloppyDevice]);
	}
	y2debug ("Detected device mapping: %1", mapping);
	return mapping;
    }

    /**
     * translate UNIX device /dev/hda to grub device (hd0)
     * @param o_dev string UNIX device
     * @return string grub device
     */
    global define string unixDev2grubDev (string o_dev) ``{
	// md can't be translated as they are, use one of partitions
	if (regexpmatch (o_dev, "\/dev\/md[0-9]+"))
	{
	    o_dev = BootCommon::Md2Partition (o_dev);
	}
        integer i = 0;
        map p_dev = Storage::GetDiskPartition (o_dev);
        any num = p_dev["nr"]:nil;
        o_dev = p_dev["disk"]:"";
        if (findlastof (o_dev, "/") == nil)
            o_dev = o_dev + "/dev/";
	string dev =
	    (string)select (
		(list)select (
		    filter (list l, device_map, ``(l[1]:"" == o_dev)), 0, []
		), 0, ""
	    );
	if (dev == "")
	    dev = "(null)";
        else if (num != 0 && num != "" && num != nil)
        {
            integer int_num = (integer)num - 1;
            string number = sformat ("%1", int_num);
            dev = substring (dev, 0, size (dev) - 1) + "," + number + ")";
        }
        return dev;
    }

    /**
      * translate grub device (hd0) to UNIX device /dev/hda
      * @param o_dev string grub device
      * @return string UNIX device
      */
    global define string grubDev2unixDev (string o_dev) ``{
	string number = "";
	if (o_dev == nil)
	    return o_dev;
	if (findfirstof (o_dev, ",") != nil)
	{
	    number = substring (o_dev, (findfirstof (o_dev, ",") + 1));
	    number = substring (number, 0, (size (number) - 1));
	    o_dev = substring (o_dev, 0, findfirstof (o_dev, ",")) + ")";
	}
        string dev =
            (string)select (
                (list)select (
                    filter (list l, device_map, ``(l[0]:"" == o_dev)), 0, []
                ), 1, ""
            );
	if (dev == "")
	    dev = "/dev/null";
	else if (number != "")
	{
	    integer num = tointeger (number);
	    num = num + 1;
	    dev = Storage::GetDeviceName (dev, num);
	}
	dev = BootCommon::Partition2Md (dev);
	return dev;
    }

    /**
      * translate filename path (eg. (hd0,0)/kernel) to list of device
      *  and relative path
      * @param devpth string fileststem path (eg. (hd0,0)/vmlinuz)
      * @return list containing device and relative path,
      *  eg. ["(hd0,0)", "/vmlinuz"]
      */
    global define list<string> splitDevPath (string devpth) ``{
	integer brake = nil;
	if (devpth != nil && issubstring (devpth, ")"))
	    brake = findfirstof (devpth, ")") + 1;
	list<string> ret = [];
	if (brake != nil)
	{
	    ret[0] = substring (devpth, 0, brake);
	    ret[1] = substring (devpth, brake);
	}
	else
	{
	    ret[0] = nil;
	    ret[1] = devpth;
	}
        return ret;
    }

    /**
      * translate list of device and relative path
      *  to filename path (eg. (hd0,0)/kernel)
      * @param devpth list of two strings, first for device name, second for
      *  relative path (eg. ["(hd0,0)", "/vmlinuz"])
      * @return string fileststem path (eg. (hd0,0)/vmlinuz)
      */
    global define string mergeDevPath (list devpth) ``{
        if (substring (devpth[1]:"", 0, 1) != "/")
            devpth[1] = "/" + devpth[1]:"";
	if (devpth[0]:"" == nil || devpth[1]:"" == nil)
	    return nil;
	string ret = devpth[0]:"" + devpth[1]:"";
        return ret;
    }

    /**
      * translate UNIX filename to grub path
      * @param filename string UNIX-style filename (eg. "/boot/vmlinuz")
      * @return string GRUB-like filename (eg. "(hd0,0)/vmlinuz")
      */
    global define string file2grub (string filename) ``{
	if (Mode::config)
	    return filename;
	list split = BootCommon::splitPath (filename);
	split[0] = unixDev2grubDev (split[0]:"");
	return mergeDevPath (split);
    }

    /**
      * translate grub path to UNIX filename
      * @param grubpath string GRUB-like filename (eg. "(hd0,0)/vmlinux")
      * @return string UNIX-style filename (eg. "/boot/vmlinuz")
      */
    global define string grub2file (string grubpath) ``{
	list<string> split = splitDevPath (grubpath);
	split[0] = grubDev2unixDev (split[0]:"");
	return BootCommon::mergePath (split);
    }

    /**
      * parse /etc/grub file from other file
      * @param file string contents of grub.conf file
      * @return map of settings
      */
    global define map<string,string> parseGrubConf (string file) ``{
	if (file == "" || file == nil)
	    return $[];
	list<string> lines = splitstring (file, "\n");
	lines = filter (string l, lines, ``(l != ""));
	map<string,string> settings = $[];
	string root = "";
	foreach (string l, lines, ``{
	    list<string> entries = splitstring (l, " ");
	    entries = filter (string e, entries, ``(e != ""));
	    if (select (entries, 0, "") == "root")
	        root = entries[1]:"";
	    else if (select (entries, 0, "") == "install")
	    {
	        integer shift = 0;
		integer shift1 = 1 + shift;
	        string tmp = entries[shift1]:"";
	        while (substring (tmp, 0, 2) == "--")
	        {
		    string prefix = settings["prefix"]:"";
		    prefix = prefix + " " + tmp;
	            settings = add (settings, "prefix", prefix);
	            shift = shift + 1;
		    shift1 = 1 + shift;
	            tmp = entries[shift1]:"";
	        }
	        settings = add (settings, "stage1", tmp);
		integer shift2 = 2 + shift;
	        tmp = entries[shift2]:"";
	        if ("d" == tmp)
	        {
	            settings = add (settings, "discswitch", "d");
	            shift = shift + 1;
		    integer shift2 = 2 + shift;
	            tmp = entries[shift2]:"";
	        }
	        settings = add (settings, "device", tmp);
		integer shift3 = 3 + shift;
	        tmp = entries[shift3]:"";
	        settings = add (settings, "stage2", tmp);
		integer shift4 = 4 + shift;
	        tmp = entries[shift4]:"";
	        settings = add (settings, "addr", tmp);
		integer shift5 = 5 + shift;
	        tmp = entries[shift5]:"";
	        if (substring (tmp, 0, 1) == "/")
	            tmp = sformat ("%1%2", root, tmp);
	        settings = add (settings, "menu", tmp);
	    }
	    settings = add (settings, "root", root);
	});
	return settings;
    }

    /**
      * parse /etc/grub file
      * @return map of settings
      */
    global define map<string,string> readGrubConf () ``{
	return parseGrubConf ((string)
	    SCR::Read (.target.string, "/etc/grub.conf"));
    }



    /**
      * get /etc/grub.conf file from settings as string
      * @param settings map of settings
      * @return string file contents
      */
    global define string getGrubConf (map<string,string> settings) ``{
	string res = "";
	string root = sformat ("root %1\n", settings["root"]:"");
	res = sformat (settings["discswitch"]:"" == "d"
	    ? "install %6 %1 d %2 %3 %4 %5"
	    : "install %6 %1 %2 %3 %4 %5",
	        settings["stage1"]:"",
	        settings["device"]:"",
	        settings["stage2"]:"",
	        settings["addr"]:"",
	        settings["menu"]:"",
		settings["prefix"]:"");
	res = sformat ("%1%2\nquit\n", root, res);
	return res;
    }

    /**
      * save /etc/grub.conf
      * @param settings map settings
      * @return boolean true if success
      */
    global define boolean saveGrubConf (map<string,string> settings) ``{
	if (settings == $[])
	    return true;
	return SCR::Write (.target.string, "/etc/grub.conf",
	    getGrubConf (settings));
    }

    /**
      * Propose /etc/grub.con
      * @return map grub-conf file
      */
    global define map<string,string> proposeGrubConf () ``{
	list<string> stage1 = splitDevPath (file2grub ("/boot/grub/stage1"));
	list<string> stage2 = splitDevPath (file2grub ("/boot/grub/stage2"));
	return $[
	    "discswitch" : "d",
	    "root" : stage1[0]:"",
	    "stage1" : stage1[1]:"",
	    "device" : unixDev2grubDev(BootCommon::loader_device),
	    "stage2" : stage2[1]:"",
	    "addr" : "0x8000",
	    "menu" : file2grub ("/boot/grub/menu.lst"),
	    "prefix" : "--stage2=/boot/grub/stage2",
	];
    }

    /**
      * Remaps values of map src according to mapping
      * @param src map source map
      * @param mapping map mapping description
      * @return list modified map
      */
    global define list<map> remapDisks (list<map> src, map<string,string> mapping) ``{
	foreach (string k, string v, mapping, ``{
	   mapping = add (mapping, substring (k, 0, size (k) - 1) + ",",
				substring (v, 0, size (v) - 1) + ",");

	});
	map<string,string> m1 = $[];
	map<string,string> m2 = $[];
	integer counter = 0;
	foreach (string k, string v, mapping, ``{
	    string scounter = sformat ("\\*\\*\\*\n%1\n*\\*\\*\\", counter);
	    m1[k] = scounter;
	    m2[scounter] = v;
	    counter = counter + 1;
	});

	list<map> ret = maplist (map v, src, ``{
	    if (v["key"]:"" != "__intern__" && is (v["value"]:(any)"",  string))
	    {
		foreach (string s, string d, m1, ``{
		    if (is (v["value"]:nil, string) && v["value"]:nil != nil)
			v["value"]
			    = BootCommon::replaceAll (v["value"]:"", s, d);
		});
		foreach (string s, string d, m2, ``{
		    if (is (v["value"]:nil, string) && v["value"]:nil != nil)
			v["value"]
			    = BootCommon::replaceAll (v["value"]:"", s, d);
		});
	    }
	    return v;
	});
	return ret;
    }




}
