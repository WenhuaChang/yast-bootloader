{

textdomain "bootloader";

import "CWM";
import "Label";
import "BootCommon";
import "Popup";

include "bootloader/grub/helps.ycp";


/**
 * Init function of widget
 * @param widget string id of the widget
 */

void InitMeasuresTable(string widget) 
{
    map <string, string> meas = BootCommon::current_section["measure"]:$[];
    list measures = [];

    foreach(string file, string pcr, meas, {	
	measures = add(measures, `item(`id(file), file, pcr));
    });

    UI::ChangeWidget (`id (`measures), `Items, measures);
}



void AddEditMeasure (string file, string pcr)
{
    map <string, string> meas = BootCommon::current_section["measure"]:$[];
    string orig_file = file;
    any ret = nil;

    if (pcr == "")
	pcr ="8";

    UI::OpenDialog( (file != "") ? `Label( _("Edit Measure")): `Label( _("Add New Measure") ),
        `VBox(
		`HBox(
			`InputField(`id(`measur), _("Measure File"), file),
			`VBox ( `Label(""),
				`PushButton(`id(`br), Label::BrowseButton())
			)
		),
		`Left(`IntField(`id(`pcr), _("PCR Index of File"),0, 100, tointeger(pcr))),
		`HBox(
			`PushButton(`id(`cancel), Label::CancelButton()),
			`PushButton(`id(`ok), Label::OKButton())
           )
	)
     ); // end of UI::OpenDialog(

     while (true) {
       ret = UI::UserInput();
       if (ret == `br) {
	   string val = UI::AskForExistingFile  ("/","*.*",_("Please Select File"));
	   UI::ChangeWidget(`id(`measur), `Value, val);
       } else if ( ret == `ok ) {
	   string new_file = tostring(UI::QueryWidget(`id(`measur), `Value));
	   string new_pcr = tostring(UI::QueryWidget(`id(`pcr), `Value));
	   if (file != "")
	   {
	       meas = remove(meas, file);
	   }
	   meas[new_file] = new_pcr;
	   break;
       } else if (ret == `cancel) {
           break;
       }
     };
     BootCommon::current_section["measure"] = meas;

     UI::CloseDialog();
}

/**
 * Handle function of a widget
 * @param widget string widget key
 * @param event map event description of event that occured
 * @return symbol to return to wizard sequencer, or nil
 */
symbol HandleMeasuresTable (string widget, map event) 
{

    any op = event["ID"]:nil;
    if (event["ID"]:nil == `measures
	&& event["EventReason"]:"" == "Activated"
	&& event["EventType"]:"" == "WidgetEvent")
    {
	op = `edit;
    }
    map <string, string> meas = BootCommon::current_section["measure"]:$[];

    string current = (string)UI::QueryWidget (`id (`measures), `CurrentItem);
    string act_file = "";
    string act_pcr = "";

    if ((current != nil) && (current != ""))
    {
	act_file = current;
	act_pcr = meas[current]:"";
    }
    if (op == `add)
    {
	AddEditMeasure("", "");
	InitMeasuresTable(widget);
    } else if (op == `edit) {
	
	AddEditMeasure(act_file, act_pcr);
	InitMeasuresTable(widget) ;
    } else if (op == `delete) {
	string message = sformat(_("Really delete measured file: %1 with PCR: %2 ?"), act_file, act_pcr);
	if (Popup::YesNo(message))
        {
	   meas = remove(meas,act_file);
	   BootCommon::current_section["measure"] = meas;
	   InitMeasuresTable(widget);
	}
    }

}
/**
 * Store function of a widget
 * @param widget string widget key
 * @param event map event that caused the operation
 */
void StoreMeasuresTable (string widget, map event) 
{
    if ((size(BootCommon::current_section["measure"]:$[]) == 0) && 
	(haskey(BootCommon::current_section, "measure")))
	BootCommon::current_section = remove(BootCommon::current_section, "measure");
}

/**
 * Init function of widget
 * @param widget string id of the widget
 */

void InitPCRKernel (string widget) {
    if ((BootCommon::current_section["type"]:"" == "image") || (BootCommon::current_section["type"]:"" == "xen"))
    {
	UI::ChangeWidget (`id ("PCRKernel"), `Enabled, true);
	UI::ChangeWidget (`id ("PCRKernel"), `Value, tointeger(BootCommon::current_section["imagepcr"]:"8"));
    } else {
	UI::ChangeWidget (`id ("PCRKernel"), `Enabled, false);
    }
}


/**
 * Store function of a widget
 * @param widget string widget key
 * @param event map event that caused the operation
 */
void StorePCRKernel (string widget, map event) {
    if ((BootCommon::current_section["type"]:"" == "image") ||
	(BootCommon::current_section["type"]:"" == "xen"))
    	BootCommon::current_section["imagepcr"] = tostring(UI::QueryWidget (`id ("PCRKernel"), `Value));
}

/**
 * Init function of widget
 * @param widget string id of the widget
 */

void InitPCRInitrd (string widget) {
    if ((BootCommon::current_section["type"]:"" == "image") || (BootCommon::current_section["type"]:"" == "xen"))
    {
	UI::ChangeWidget (`id ("PCRInitrd"), `Enabled, true);
	UI::ChangeWidget (`id ("PCRInitrd"), `Value, tointeger(BootCommon::current_section["initrdpcr"]:"8"));
    } else {
	UI::ChangeWidget (`id ("PCRInitrd"), `Enabled, false);	
    }
}


/**
 * Store function of a widget
 * @param widget string widget key
 * @param event map event that caused the operation
 */
void StorePCRInitrd (string widget, map event) {
    if ((BootCommon::current_section["type"]:"" == "image") ||
	(BootCommon::current_section["type"]:"" == "xen"))
    	BootCommon::current_section["initrdpcr"] = tostring(UI::QueryWidget (`id ("PCRInitrd"), `Value));
}



/**
 * Init function of widget
 * @param widget string id of the widget
 */

void InitPCRChainloader (string widget) {
    if (BootCommon::current_section["type"]:"" != "other")
	UI::ChangeWidget (`id ("PCRChainloader"), `Enabled, false);
    else
    	UI::ChangeWidget (`id ("PCRChainloader"), `Value, tointeger(BootCommon::current_section["chainloaderpcr"]:"8"));
}


/**
 * Store function of a widget
 * @param widget string widget key
 * @param event map event that caused the operation
 */
void StorePCRChainloader (string widget, map event) {
    if (BootCommon::current_section["type"]:"" == "other") 
    	BootCommon::current_section["chainloaderpcr"] = tostring(UI::QueryWidget (`id ("PCRChainloader"), `Value));
}



map<string,map<string,any> > wid_handling = $[


  "MeasuresTable"	: $[
     //TRANSLATORS: RadioButtonGroup Label
     "label" 		: _("Measurement of Grub"),
     "widget" 		: `custom,
     "custom_widget"	: `VBox(`Frame (_("Measures"),
	    `HBox (`HSpacing (2), `VBox (
		    `VSpacing (1),
		    `Table (`id (`measures),
		    	`opt (`keepSorting, `notify),
		    	`header (
				// table header, Measure
				_("Measure"),
				// table header, PCR
				_("PCR")
			), []
		    ),

		    `HBox (
			    `HStretch (),
			    `PushButton (`id (`add), `opt (`key_F3), Label::AddButton ()),
			    `PushButton (`id (`edit), `opt(`key_F5), Label::EditButton ()),
			    `PushButton (`id (`delete), `opt(`key_F5), Label::DeleteButton ()),
			    `HStretch ()
		     ),
		    `VSpacing (1)
		)

	    )
     )),
     "init"		: InitMeasuresTable,
     "handle"		: HandleMeasuresTable,
     "store"		: StoreMeasuresTable,
     "help"		: grub_help_messages["MeasuresTableHelp"]:"",

  ],

  "PCRKernel"		: $[
     //TRANSLATORS: IntField Label
     "label" 		: _("PCR Index of &Kernel"),
     "widget" 		: `intfield,
     "minimum" 		: 0,
     "maximum" 		: 100,
     "init"		: InitPCRKernel,
     //"handle"		: 
     "store"		: StorePCRKernel,
     "help"		: grub_help_messages["PCRKernelHelp"]:"",
  ],



  "PCRInitrd"		: $[
     //TRANSLATORS: IntField Label
     "label" 		: _("PCR Index of &Initrd"),
     "widget" 		: `intfield,
     "minimum" 		: 0,
     "maximum" 		: 100,
     "init"		: InitPCRInitrd,
     //"handle"		: 
     "store"		: StorePCRInitrd,
     "help"		: grub_help_messages["PCRInitrdHelp"]:"",
  ],


  "PCRChainloader"		: $[
     //TRANSLATORS: IntField Label
     "label" 		: _("PCR &Index of Chainloader"),
     "widget" 		: `intfield,
     "minimum" 		: 0,
     "maximum" 		: 100,
     "init"		: InitPCRChainloader,
     //"handle"		: 
     "store"		: StorePCRChainloader,
     "help"		: grub_help_messages["PCRChainloaderHelp"]:"",
  ],

];




symbol TrustedGrubDetails () {
    y2milestone ("Running i386 loader details dialog");

    term contents = `HBox (`HSpacing (2), `VBox (
	"MeasuresTable",
	`VSpacing (1),
	"PCRKernel",
	`VSpacing (1),
	"PCRInitrd",
	`VSpacing (1),
	"PCRChainloader",
	`VStretch ()
    ), `HSpacing (2));

    list<string> widget_names = ["MeasuresTable", "PCRKernel", "PCRInitrd", "PCRChainloader",];
    map<string,map<string,any> > widget_descr = wid_handling;
   // dialog caption
    string caption = _("Trusted GRUB Options");
    return CWM::ShowAndRun ($[
	"widget_descr" : widget_descr,
	"widget_names" : widget_names,
	"contents" : contents,
	"caption" : caption,
	"back_button" : Label::BackButton (),
	"abort_button" : Label::CancelButton (),
	"next_button" : Label::OKButton (),
    ]);
}


























}
