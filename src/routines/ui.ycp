/**
 * File:
 *      include/bootloader/routines/ui.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      User interface for bootloader installation/configuration
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */


{
    textdomain "bootloader";

    include "wizard/sequencer.ycp";
    import "CWM";
    import "Label";
    import "Popup";
    import "Mode";
    import "Wizard";

    include "bootloader/routines/wh.ycp";
    include "bootloader/routines/popups.ycp";
    include "bootloader/routines/convert.ycp";
    include "bootloader/routines/routines.ycp";

    import "BootCommon";
    import "Bootloader";

    /**
      * Handle function of a widget
      * @param widget any widget key
      * @param event map event description of event that occured
      * @return symbol to return to wizard sequencer, or nil
      */
    global define symbol resetButtonHandle (any widget, map event) ``{
	any op = event["ID"]:nil;
        if (op == `restore_mbr)
        {
            boolean doit = restoreMBRPopup (BootCommon::mbrDisk);
	    y2milestone ("Rewrite MBR with saved one: %1", doit);
	    if (doit)
	    {
		boolean ret = BootCommon::restoreMBR (BootCommon::mbrDisk);
		if (ret)
		    // message popup
		    Popup::Message (_("MBR restored successfully"));
		else
		    // message popup
		    Popup::Message (_("Failed to restore MBR"));
	    }
            return;
        }

	if (! contains ([`scratch, `reread, `propose_deep, `propose], op))
	{
	    return nil;
	}
	Bootloader::Reset ();
	if (op == `scratch)
	{
	}
	else if (op == `reread)
	{
	    Bootloader::Read ();
	}
	else if (op == `propose_deep)
	{
	    import "BootGRUB";
	    BootGRUB::deep_propose = true;
	    Bootloader::Propose ();
	}
	else if (op == `propose)
	{
	    if (Bootloader::getLoaderType () == "grub")
	    {
		import "BootGRUB";
		BootGRUB::deep_propose = false;
	    }
	    Bootloader::Propose ();
	}
        BootCommon::fetchSettings ();
        BootCommon::current_section = eval (BootCommon::current_globals);
        BootCommon::current_section_name = `global;

	return `redraw;

	// FIXME this must be solved some way
	readWidgets (CWM::CreateWidgets(["globalsection"], BootCommon::GetWidgets ()));
    }

    /**
      * Ask for bootlaoder switch method
      * @param from string current spooler
      * @param to string new spooler
      * @param type of switching,
      *   `proposal for switching proposed because of disks changed
      *   `user for switching upon user's request
      * @return symbol method
      */
    global define symbol askSwitch (string from, string to, symbol type) ``{
	// warning - popup
	string label = type == `user ? _("Warning!

You chose to change your boot loader. When converting 
the configuration, some settings may be lost.

The current configuration will be saved and you will be able
to restore it if you return to the current boot loader.

Select a course of action:
")
		// warning - popup
	    : sformat (_("Warning!

Your partitioning setup has changed. It is recommended
to use %1 with the current partitioning setup. 

When converting the configuration, some settings may be lost.
The current configuration will be saved and you will be able
to restore it if you return to the current boot loader.

Switch boot loader?"), BootCommon::getLoaderName (to));

	term contents = `VBox (
		// warning label
	    `Label (label),
	    `VSpacing (1),
	    `RadioButtonGroup (`id (`action), `VBox (
		canConvert (from, to)
		    ? `Left (`RadioButton (`id (`convert),
			// radiobutton
			_("Co&nvert Current Configuration")))
		    : `VSpacing (0),
		type == `proposal ? `VSpacing (0)
		: `Left (`RadioButton (`id (`scratch),
		    // radiobutton
		    _("&Start New Configuration from Scratch"))),
		`Left (`RadioButton (`id (`propose),
		    // radiobutton
		    _("&Propose New Configuration"))),
		Mode::normal
		    ? `Left (`RadioButton (`id (`read),
			// radiobutton
			_("&Read Configuration Saved on Disk")))
		    : `VSpacing (0),
		BootCommon::other_bl[to]:nil == nil || type == `proposal
		    ? `VSpacing (0)
		    : `Left (`RadioButton (`id (`prev),
			// radiobutton
			_("Res&tore Configuration Saved before Conversion")))
	    )),
	`VSpacing (1),
	`HBox (
	    `HStretch (),
	    `PushButton (`id (`ok), `opt (`key_F10), Label::OKButton ()),
	    `HSpacing (1),
	    `PushButton (`id (`cancel), `opt (`key_F9), Label::CancelButton ()),
	    `HStretch ()
	));
	UI::OpenDialog (contents);
	UI::ChangeWidget (`id (`convert), `Value, true);
	symbol ret = UI::UserInput ();
	symbol action = UI::QueryWidget (`id (`action), `CurrentButton);
	UI::CloseDialog ();
	if (ret != `ok)
	    return nil;
	return action;
    }

    /**
      * Store function of a widget
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void loaderTypeStore (any opt_id, any opt_key) ``{

	string old_bl = Bootloader::getLoaderType ();
	string new_bl = UI::QueryWidget (`id (`loader_type), `Value);
	if (old_bl == new_bl)
	    return;

	if (new_bl == "none")
	{
	    // popup - Continue/Cancel
	    if (Popup::ContinueCancel (_("Warning!

If you do not install any boot loader, the system
may not start.

Proceed?
")))
	    {
		BootCommon::other_bl[old_bl] = Bootloader::Export ();
		BootCommon::setLoaderType ("none");
		BootCommon::location_changed = true;
	    }
	    BootCommon::redraw_table = true;
	    return;
	}

	symbol action = askSwitch (old_bl, new_bl, `user);
	if (nil != action)
	{
	    y2milestone ("Switching bootloader");
	    if (old_bl != "none")
		BootCommon::other_bl[old_bl] = Bootloader::Export ();
	    BootCommon::setLoaderType (new_bl);

            if (action == `scratch)
		Bootloader::Reset ();
            else if (action == `read)
                Bootloader::Read ();
            else if (action == `propose)
	    {
		Bootloader::Reset ();
                Bootloader::Propose ();
	    }
            else if (action == `convert)
                convertSettings (old_bl, new_bl);
            else if (action == `prev)
                Bootloader::Import (BootCommon::other_bl[new_bl]:$[]);

	    BootCommon::fetchSettings ();
            BootCommon::current_section = eval (BootCommon::current_globals);
            BootCommon::current_section_name = `global;
	}
	BootCommon::location_changed = true;
	BootCommon::redraw_table = true;
    }

    /**
      * Run dialog for sections managment
      * @return symbol wizard sequencer symbol
      */
    global define symbol runSectionsDialog () ``{
        list widgets = CWM::CreateWidgets (["sections"],
	    BootCommon::cwm_widgets);
        term contents = `HBox (`HSpacing (1), `VBox (
		`VSpacing (1),
                widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (1));
	// dialog caption
        string caption = _("Boot Loader Setup -- Sections Managment");
        string help = CWM::MergeHelps (widgets);
	Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());

	return CWM::Run (widgets, $[]);
    }

    /**
      * Run dialog for single section managment
      * @return symbol wizard sequencer symbol
      */
    global define symbol runSingleSectionDialog () ``{
	list widgets = CWM::CreateWidgets (["singlesection"],
	    BootCommon::cwm_widgets);
        term contents = `HBox (`HSpacing (1), `VBox (
                `VSpacing (1),
                widgets[0, "widget"]:`VSpacing (0),
		`VSpacing (1)
                ), `HSpacing (1));
	// dialog caption
        string caption = _("Boot Loader Setup -- Sections Managment");
        string help = CWM::MergeHelps (widgets);
	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::OKButton ());

	return CWM::Run (widgets, $[]);
    }

    /**
      * Run main summary dialog
      * @return symbol wizard sequencer symbol
      */
    global define symbol runSummaryDialog () ``{
	list widgets = CWM::CreateWidgets (["globalsection", "resetbutton",
	    "manual_edit_button"], BootCommon::cwm_widgets);
        term contents = `HBox (`HSpacing (1), `VBox (
                `VSpacing (1),
                widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1),
                widgets[2, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (1));
	// dialog caption
        string caption = _("Boot Loader Setup");
        string help = CWM::MergeHelps (widgets);
	string next_button = (Mode::initial || Mode::config)
	    ? Label::AcceptButton ()
	    : Label::FinishButton ();

	Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::FinishButton ());

	return CWM::Run (widgets, $[]);
    }

    /**
      * Run dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runEditFilesDialog () ``{
        map files = Bootloader::blGetFiles ();
	string default = files["default"]:"";
	files = filter (`k, `v, files, ``(k != "default"));
        list filenames = [];
        foreach (`k, `v, files, ``{
            filenames = add (filenames, k);
        });
	term cb = nil;
	if (size (files) > 1)
	    cb = `ComboBox (`id (`filename), `opt (`notify, `hstretch),
		// combobox label
		_("&File Name"), filenames);
	else
	    // label. %1 is name of file (eg. /etc/lilo.conf
	    cb = `Left (`Label (sformat (_("File Name: %1"), filenames[0]:"")));

	term contents = `HBox (`HSpacing (2), `VBox (
            `VSpacing (2),
	    cb,
            `VSpacing (2),
            `MultiLineEdit (`id (`file), `opt (`hstretch, `vstretch),
		// multiline edit header
                _("Fi&le Contents")),
            `VSpacing (2)
	), `HSpacing (2));

	// dialog caption
        string caption = _("Expert Manual Configuration");
        string help = BootCommon::getExpertManualHelp ();

        list exits = [`back, `next, `abort, `ok, `apply, `accept];

        Wizard::SetContentsButtons (caption, contents, help,
            Label::BackButton (), Label::OKButton ());

	Wizard::RestoreBackButton ();
	Wizard::RestoreAbortButton ();

	string filename = filenames[0]:"";
	if (default != "")
	    filename = default;
	if (size (files) > 1)
	    UI::ChangeWidget (`id (`filename), `Value, filename);
	UI::ChangeWidget (`id (`file), `Value, files[filename]:"");

        any ret = nil;
        while (! contains (exits, ret))
        {
            ret = UI::UserInput ();
	    if (ret == `filename)
	    {
		files[filename] = UI::QueryWidget (`id (`file), `Value);
		filename = UI::QueryWidget (`id (`filename), `Value);
		UI::ChangeWidget (`id (`file), `Value, files[filename]:"");
	    }
	    if (ret == `next)
	    {
		files[filename] = UI::QueryWidget (`id (`file), `Value);
		Bootloader::blSetFiles (files);
		BootCommon::changed = true;
		BootCommon::location_changed = true;
	    }
	    if (ret == `abort)
	    {
		if (! confirmAbortPopup ())
		    ret = nil;
	    }
        }
        return ret;
    }


    /**
      * Get generic aliases
      * @return map aliases
      */
    global define map getAliases () ``{
	return $[
	    "summary" : ``(runSummaryDialog ()),
// general routines
	    "fetch" : [``(BootCommon::fetchSettings ()), true],
	    "store" : [``(BootCommon::storeSettings ()), true],
// expert edit dialog
	    "editfiles" : ``(runEditFilesDialog ()),
// global settings dialogs
	    "globals" : ``(runGlobalsDialog ()),
	    "target" : ``(runTargetDialog ()),
// sections managment dialogs
	    "sects" : ``(runSectionsDialog ()),
	    "singlesect" : ``(runSingleSectionDialog ()),
// sequences definitions
	    "global_seq" :
		``(WizardSequencer (aliases, ws_data["glob_seq"]:$[])),
	    "sect_seq" :
		``(WizardSequencer (aliases, ws_data["sect_seq"]:$[])),
	];
    }


    /**
      * Run wizard sequencer
      * @return `next, `back or `abort
      */
    global define symbol runWizard () ``{

	map glob_seq = $[
	    "ws_start" : "fetch",
	    "fetch" : $[ `next : "globals", `abort: `abort],
	    "globals" : $[ `next: "target", `abort: `abort ],
	    "target" : $[ `next: "store", `abort: `abort ],
	    "store" : $[ `next: `next, `abort: `abort ],
	];

	map sect_seq = $[
	    "ws_start" : "fetch",
	    "fetch" : $[ `next : "sects", `abort: `abort],
	    "sects" : $[ `next: "store", `add : "singlesect",
		`edit : "singlesect", `abort: `abort ],
	    "singlesect" : $[ `next: "sects", `abort: `abort],
	    "store" : $[ `next: `next, `abort: `abort ],
	];

	map normal_sequence = $[
	    "ws_start" : "summary",
	    "summary" : $[
		`next: `next,
		`abort: `abort,
		`glob : "global_seq",
		`manual : "editfiles",
		`sections : "sect_seq",
		`redraw : "summary",
	     ],
	    "editfiles" : $[ `next : "summary", `abort: `abort ],
	    "global_seq" : $[ `next : "summary", `abort: `abort ],
	    "sect_seq" : $[ `next : "summary", `abort: `abort ],
	];

	map ws_data = $[
	    "start_seq" : "startseq",
	    "startseq" : normal_sequence,
	    "glob_seq" : glob_seq,
	    "sect_seq" : sect_seq,
	];

	// add specific aliases and modify sequence if needed
	ws_data = Bootloader::blGetSequence (ws_data);

	map aliases = getAliases ();
	// merge new aliases
	foreach (`k, `v, ws_data["aliases"]:$[], ``{
	    aliases[k] = v;
	});
	string start_seq = ws_data["start_seq"]:"";
	map sequence = ws_data[start_seq]:$[];

	// run wizard
	y2milestone ("Starting wizard sequencer");
	return WizardSequencer (aliases, sequence);
    }

}
