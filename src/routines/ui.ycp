/**
 * File:
 *      include/bootloader/routines/ui.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      User interface for bootloader installation/configuration
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */


{
    textdomain "bootloader";

    include "wizard/sequencer.ycp";
    include "ui/common_messages.ycp";

    include "bootloader/routines/wh.ycp";
    include "bootloader/routines/popups.ycp";
    include "bootloader/routines/convert.ycp";

    import "BootCommon";
    import "Bootloader";

    /**
      * Displaye popup for option to edit choosing
      * @param ot any option type (`global, "image", "other",...
      *   may be bootloader dependent)
      * @return any option identifies, nil if canceled
      */
    global define any getOptionChoicePopup (any ot) ``{
	list optnames = lookup (Bootloader::blOptions (),
	    BootCommon::tmp_store["section_type"]:`global, []);
	term widget = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
	    `ComboBox (`id (`optname), `opt (`editable),
		_("&Selected option"), optnames),
	    `VSpacing (1),
	    `HBox (
		`HStretch (),
		`PushButton (`id (`ok), OKButtonLabel ()),
		`HSpacing (1),
		`PushButton (`id (`cancel), CancelButtonLabel ()),
		`HStretch ()
	    ),
	    `VSpacing (1)
	), `HSpacing (1));
	UI::OpenDialog (widget);
	any ret = nil;
	any option = nil;
	while (ret != `ok && ret != `cancel)
	{
	    ret = UI::UserInput ();
	    if (ret == `ok)
	    {
		option = UI::QueryWidget (`id (`optname), `Value);
	    }
	}
	UI::CloseDialog ();
	if (ret == `cancel)
	    return nil;
	selected_opt = option;
	return option;
    }

    /**
      * Gets the widget for editing specified bootloader option
      * @param optname any option name
      * @param ot any option type (`global, "image", "other",...
      *   may be bootloader dependent)
      * @return term widget
      */
    global define term getSpecificOptionWidget (any optname, any ot) ``{
	map widget_data = getPopupWidget (optname);
        term widget = widget_data["widget"]:nil;
	map sect = BootCommon::tmp_store["active_section"]:$[];
        if (widget == nil)
        {
            string type = widget_data["type"]:lookup (
                BootCommon::opttypes (), optname, "s");
            if (type == "b")
                widget = `CheckBox (`id (`value), _("&Set"),
                    sect[optname]:true);
            else if (type == "i")
                widget = `IntField (`id (`value), _("&Value"), 0, 999999,
                    sect[optname]:0);
            else
                widget = `TextEntry (`id (`value), _("&Value"),
                    sect[optname]:"");
        }
        return widget;
    }

    /**
      * Display and handle the popup for option
      * @param opttype any option type (`global, "image", "other",...
      *   may be bootloader dependent)
      * @param optname any option name
      * @return symbol `ok or `cancel
      */
    global define symbol singleOptionEditPopup (any opttype, any optname)``{
        map sect = BootCommon::tmp_store["active_section"]:$[];
        if (optname == "")
        {
	    optname = getOptionChoicePopup (any opttype);
	    if (optname == nil)
		return;
        }

	map widget_data = getPopupWidget (optname);

	y2milestone ("Popup widget: %1", widget_data);
        string label = sformat ("%1", widget_data["label"]:optname);
        term header = `HBox (
	    `Heading (_("Current option: ")),
	    `Label (label),
	    `HStretch ()
	);
        term widget = getSpecificOptionWidget (optname, opttype);
	string help = widget_data["help"]:"";
	if (help == nil)
	{
	    help = "";
	}
        term contents = `HBox (`HSpacing (1), `VBox (
	    `VSpacing (1),
            `Left (header),
	    `VSpacing (1),
	    help == "" ? `VSpacing (0)
		: `Left (`Label (help)),
            `VSpacing (help == "" ? 0 : 1),
            `Left (`ReplacePoint(`id (`value_rp), widget)),
	    `VSpacing (1),
            `HBox (
                `HStretch(),
		`PushButton (`id (`ok), OKButtonLabel ()),
		`HSpacing (1),
                `PushButton (`id (`cancel), CancelButtonLabel ()),
                `HStretch ()
            ),
	    `VSpacing (1)
        ), `HSpacing (1));
        UI::OpenDialog (contents);
	eval (widget_data["restore"]:nil);
        any ret = nil;
        while (ret != `ok && ret != `cancel)
        {
            ret = UI::UserInput ();
	    if (ret != `ok)
	    {
		if (widget_data["handle"]:nil != nil)
		{
		    term toEval = widget_data["handle"]:nil;
		    toEval = add (add (toEval, ret), [`ok]);
		    eval (toEval);
		}
	    }
	    if (ret == `ok)
	    {
		if (widget_data["validate"]:nil != nil
		    && ! eval (widget_data["validate"]:nil))
		{
		    ret = nil;
		}
	    }
	    if (ret == `ok)
	    {
		if (widget_data["handle"]:nil != nil)
		{
		    term toEval = widget_data["handle"]:nil;
		    toEval = add (add (toEval, `ok), [`ok]);
		    eval (toEval);
		}
		else
			{
		    BootCommon::tmp_store["active_section", optname]
			= UI::QueryWidget (`id (`value), `Value);
		}
		BootCommon::markOptionChanged (
		    BootCommon::tmp_store["active_section_name"]:"", optname);
	    }
        }
        UI::CloseDialog ();
	return ret;
    }

    global any selected_opt = nil;

    /**
      * Read seettings to the table of section configuration
      */
    global define void singleSectionRead () ``{
        map orig = BootCommon::tmp_store["active_section"]:$[];
	list items = [];

	list options = Bootloader::blUpdateOptionsList (orig);
	options = filter (`o, options,
	    ``(o != "__order__" && o != "__intern__"));

	map opts = getPopupWidgets ();
	foreach (`o, options, ``{
	    map widget = opts[o]:$[];
	    string label = sformat ("%1", widget["label"]:o);
	    term toEval = widget["summary"]:nil;
	    string value = "";
	    if (toEval == nil)
		value = sformat ("%1",
		    BootCommon::tmp_store["active_section", o]:"");
	    else
		value = eval (toEval);
	    string chng = BootCommon::changed_settings[
		BootCommon::tmp_store["active_section_name"]:`global, o]:false
		? "*" : "";
	    items = add (items, `item (`id (o), chng, label, value));
	});
	selected_opt = options[0]:nil;
	UI::ChangeWidget (`id (`settings), `Items, items);
	singleSectionHandle (`settings, []);
	UI::ChangeWidget (`id (`add), `Enabled, Bootloader::blOptions() != nil);
    }

    /**
      * Handle function of widget
      * @param op any operation to handle
      * @param tosave list of operations, which lead to closing & saving widget
      * @return any changed op (if needed)
      */
    global define any singleSectionHandle (any op, list tosave) ``{
	symbol ret = nil;
	any item = UI::QueryWidget (`id (`settings), `CurrentItem);
        if (op == `settings)
        {
            any prev = selected_opt;
            selected_opt = UI::QueryWidget (`id (`settings), `CurrentItem);
	    if (selected_opt == `sep1 || selected_opt == `sep2
		|| selected_opt == `sep3)
	    {
		map orig = BootCommon::tmp_store["active_section"]:$[];
		list entries = Bootloader::blUpdateOptionsList (orig);
		entries = filter (`o, entries,
		    ``(o != "__order__" && o != "__intern__"));
                selected_opt = BootCommon::dividerHack (entries, prev,
		    selected_opt);
		UI::ChangeWidget(`id(`settings), `CurrentItem, selected_opt);
	    }
	    map cur = getPopupWidget (selected_opt);
	    UI::ChangeWidget (`id (`delete), `Enabled, cur["deletable"]:true);
        }
        else if (op == `edit)
        {
	    if (item == `default_section)
		item = `sections;
	    if (item == `sections)
	    {
		return `sections;
	    }
           if (selected_opt == `sep1 || selected_opt == `sep2
		    || selected_opt == `sep3)
		return op;
            map options = Bootloader::blOptions ();
            ret = singleOptionEditPopup (
		BootCommon::tmp_store["section_type"]:"image", item);
        }
        else if (op == `add)
        {
            ret = singleOptionEditPopup (
		BootCommon::tmp_store["section_type"]:"image", "");
	    if (ret == `ok)
		BootCommon::tmp_store["active_section", "__order__"] = add (
		    BootCommon::tmp_store["active_section", "__order__"]:[],
		    selected_opt);
        }
        else if (op == `delete && confirmOptionDeletePopup ())
        {
	    map cur = getPopupWidget (item);
	    term toEval = cur["delete"]:nil;
	    if (toEval != nil)
		eval (toEval);
	    BootCommon::tmp_store["active_section"] = remove (
		BootCommon::tmp_store["active_section"]:$[], item);
	    ret = `ok;
        }
	// ORDERING BUTTONS
	else if (op == `up)
	{
	    list order
		= BootCommon::tmp_store["active_section", "__order__"]:[];
	    order = BootCommon::filterOrder (order, getPopupWidgets ());
	    integer index = -1;
	    find (`o, order, ``{
		index = index + 1;
		return o == item;
	    });
	    order = BootCommon::swapItems (order, index, index - 1);
	    BootCommon::tmp_store["active_section", "__order__"] = order;
	    ret = `ok;
	}
	else if (op == `down)
	{
            list order
                = BootCommon::tmp_store["active_section", "__order__"]:[];
	    order = BootCommon::filterOrder (order, getPopupWidgets ());
            integer index = -1;
            find (`o, order, ``{
                index = index + 1;
                return o == item;
            });
            order = BootCommon::swapItems (order, index, index + 1);
	    BootCommon::tmp_store["active_section", "__order__"] = order;
	    ret = `ok;
	}

	if ((op == `add || op == `edit || op == `delete || op == `up
	    || op == `down) && ret == `ok)
	{
	    if (BootCommon::tmp_store["section_type"]:"" == `global)
	    {
		BootCommon::tmp_store["globals"]
		    = BootCommon::tmp_store["active_section"]:$[];
		BootCommon::storeSettings ();
		readWidgets (getWidgets(["globalsection"]));
	    }
	    else
	    {
		readWidgets (getWidgets(["singlesection"]));
	    }
	    UI::ChangeWidget (`id (`settings), `CurrentItem, item);
	}
	if (contains (tosave, op)
	    && BootCommon::tmp_store["section_type"]:"" != `global)
	{
	    string ls = BootCommon::getLoaderType (false) == "grub"
		? "title" : "label";
	    string old_name = BootCommon::tmp_store["active_section_name"]:"";
	    y2milestone ("Old name: %1", old_name);
	    map as = BootCommon::tmp_store["active_section"]:$[];
	    as["__intern__"] = add (as["__intern__"]:$[], "changed", true);
	    boolean found = false;
	    BootCommon::tmp_store["sections"] = maplist (`s,
		BootCommon::tmp_store["sections"]:[],
	    ``{
		if (s[ls]:"" == old_name)
		{
		    found = true;
		    return as;
		}
		else
		    return s;
	    });
	    if (! found)
	    {
		BootCommon::tmp_store["sections"] = add (
		    BootCommon::tmp_store["sections"]:[],
		    BootCommon::tmp_store["active_section"]:$[]
		);
	    }
	    BootCommon::changed_settings[as[ls]:""]
		= BootCommon::changed_settings[old_name]:$[];
	    y2milestone ("Saving section");
	}
    }

    /**
      * Handle function of widget
      * @param op any operation to handle
      * @param tosave list of operations, which lead to closing & saving widget
      * @return any changed op (if needed)
      */
    global define any resetButtonHandle (any op, list tosave) ``{
	if (! contains ([`scratch, `reread, `propose_deep, `propose], op))
	    return;
	Bootloader::Reset ();
	if (op == `scratch)
	{
	}
	else if (op == `reread)
	{
	    Bootloader::Read ();
	}
	else if (op == `propose_deep)
	{
	    import "BootGRUB";
	    BootGRUB::deep_propose = true;
	    Bootloader::Propose ();
	}
	else if (op == `propose)
	{
	    if (BootCommon::getLoaderType (false) == "grub")
	    {
		import "BootGRUB";
		BootGRUB::deep_propose = false;
	    }
	    Bootloader::Propose ();
	}
        BootCommon::fetchSettings ();
        BootCommon::tmp_store["active_section"]
            = eval (BootCommon::tmp_store["globals"]:$[]);
        BootCommon::tmp_store["active_section_name"] = `global;
        BootCommon::tmp_store["section_type"] = `global;

	readWidgets (getWidgets(["globalsection"]));
    }

    /**
      * Ask for bootlaoder switch method
      * @param from string current spooler
      * @param to string new spooler
      * @return symbol method
      */
    global define symbol askSwitch (string from, string to) ``{
	term contents = `VBox (
	    `Label (_("Warning!

You chose to change your bootloader. This is very complex
operation. When converting configuration some settings
may get lost.

Current configuration will be saved and you will be able
to restore it if you will return back to current bootloader.

What do you want to do?")),
	    `VSpacing (1),
	    `RadioButtonGroup (`id (`action), `VBox (
		canConvert (from, to)
		    ? `Left (`RadioButton (`id (`convert),
			_("Co&nvert current configuration")))
		    : `VSpacing (0),
		`Left (`RadioButton (`id (`scratch),
		    _("&Start new configuration from scratch"))),
		`Left (`RadioButton (`id (`propose),
		    _("&Propose new configuration"))),
		Mode::normal
		    ? `Left (`RadioButton (`id (`read),
			_("&Read configuration saved on disk")))
		    : `VSpacing (0),
		BootCommon::other_bl[to]:nil == nil
		    ? `VSpacing (0)
		    : `Left (`RadioButton (`id (`prev),
			_("Res&tore to configuration saved before conversion")))
	    )),
	`VSpacing (1),
	`HBox (
	    `HStretch (),
	    `PushButton (`id (`ok), OKButtonLabel ()),
	    `HSpacing (1),
	    `PushButton (`id (`cancel), CancelButtonLabel ()),
	    `HStretch ()
	));
	UI::OpenDialog (contents);
	UI::ChangeWidget (`id (`convert), `Value, true);
	symbol ret = UI::UserInput ();
	symbol action = UI::QueryWidget (`id (`action), `CurrentButton);
	UI::CloseDialog ();
	if (ret != `ok)
	    return nil;
	return action;
    }

    /**
      * Handle function of widget
      * @param op any operation to handle
      * @param tosave list of operations, which lead to closing & saving widget
      * @return any changed op (if needed)
      */
    global define any loaderTypeSave (any op, list tosave) ``{
	if (! contains (tosave, op))
	    return;

	string old_bl = BootCommon::getLoaderType (false);
	string new_bl = UI::QueryWidget (`id (`loader_type), `Value);
	if (old_bl == new_bl)
	    return;

	symbol action = askSwitch (old_bl, new_bl);
	if (nil != action)
	{
	    y2milestone ("Switching bootloader");
	    BootCommon::other_bl[old_bl] = Bootloader::Export ();
	    BootCommon::setLoaderType (new_bl);

            if (action == `scratch)
		Bootloader::Reset ();
            else if (action == `read)
                Bootloader::Read ();
            else if (action == `propose)
	    {
		Bootloader::Reset ();
                Bootloader::Propose ();
	    }
            else if (action == `convert)
                convertSettings (old_bl, new_bl);
            else if (action == `prev)
                Bootloader::Import (BootCommon::other_bl[new_bl]:$[]);

	    BootCommon::fetchSettings ();
            BootCommon::tmp_store["active_section"]
                = eval (BootCommon::tmp_store["globals"]:$[]);
            BootCommon::tmp_store["active_section_name"] = `global;
            BootCommon::tmp_store["section_type"] = `global;
	}
	return nil;
    }


    /**
      * Generic function to create dialog and handle it's events
      * @param widgets list of widget maps
      * @param caption string dialog caption
      * @param contents term contents of dialog
      * @param help string help for the dialog
      * @param next_button string label of next button
      * @param exits list of symbols representing events to exit dialog
      * @return symbol wizard sequencer symbol
      */
    global define symbol runDialog (list widgets, string caption,
	term contents, string help, string next_button, list exits)
    ``{
	Wizard::SetContentsButtons (caption, contents, help,
	    BackButtonLabel (), next_button);

	readWidgets (widgets);

	any ret = nil;
	while (! contains (exits, ret))
	{
	    ret = UI::UserInput ();
	    if (! validateWidgetsIfNeeded (widgets, ret))
		ret = nil;
	    ret = handleChange (widgets, ret);
	}
	return ret;
    }

    /**
      * Redraw the summary text
      */
    global define void redrawSummary () ``{
	UI::ChangeWidget (`id (`summary), `Value,
	    Bootloader::blSummary (
		BootCommon::verbose ? [`verbose, `links] : [`links]));
    }

    /**
      * Run dialog for sections managment
      * @return symbol wizard sequencer symbol
      */
    global define symbol runSectionsDialog () ``{
        list widgets = getWidgets (["sections"]);
        term contents = `HBox (`HSpacing (2), `VBox (
		`VSpacing (1),
                widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        string caption = _("Bootloader setup - Sections managment");
        string help = mergeHelps (widgets);
	list exits = getExitEvents (widgets);
	return runDialog (widgets, caption, contents, help, OKButtonLabel (),
	    exits);
    }

    /**
      * Run dialog for single section managment
      * @return symbol wizard sequencer symbol
      */
    global define symbol runSingleSectionDialog () ``{
	list widgets = getWidgets (["singlesection"]);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
                widgets[0, "widget"]:`VSpacing (0),
		`VSpacing (1)
                ), `HSpacing (2));
        string caption = _("Bootloader setup - Sections managment");
        string help = mergeHelps (widgets);
        list exits = getExitEvents (widgets);
        return runDialog (widgets, caption, contents, help, OKButtonLabel (),
            exits);
    }

    /**
      * Run main summary dialog
      * @return symbol wizard sequencer symbol
      */
    global define symbol runSummaryDialog () ``{
	BootCommon::fetchSettings ();
	BootCommon::tmp_store["active_section"]
	    = eval (BootCommon::tmp_store["globals"]:$[]);
	BootCommon::tmp_store["active_section_name"] = `global;
	BootCommon::tmp_store["section_type"] = `global;
        list widgets = getWidgets (["globalsection", "summarybuttons"]);
        term contents = `HBox (`HSpacing (2), `VBox (
                `VSpacing (1),
                widgets[0, "widget"]:`VSpacing (0),
                `VSpacing (1),
                widgets[1, "widget"]:`VSpacing (0),
                `VSpacing (1)
                ), `HSpacing (2));
        string caption = _("Bootloader setup");
        string help = mergeHelps (widgets);
        list exits = getExitEvents (widgets);

        return runDialog (widgets, caption, contents, help, OKButtonLabel (),
            exits);
    }

    /**
      * Run dialog
      * @return symbol for wizard sequencer
      */
    global define symbol runEditFilesDialog () ``{
        map files = Bootloader::blGetFiles ();
	string default = files["default"]:"";
	files = filter (`k, `v, files, ``(k != "default"));
        list filenames = [];
        foreach (`k, `v, files, ``{
            filenames = add (filenames, k);
        });
	term cb = nil;
	if (size (files) > 1)
	    cb = `ComboBox (`id (`filename), `opt (`notify, `hstretch),
		// combobox label
		_("&Filename"), filenames);
	else
	    // label. %1 is name of file (eg. /etc/lilo.conf
	    cb = `Left (`Label (sformat (_("Filename: %1"), filenames[0]:"")));

	term contents = `HBox (`HSpacing (2), `VBox (
            `VSpacing (2),
	    cb,
            `VSpacing (2),
            `MultiLineEdit (`id (`file), `opt (`hstretch, `vstretch),
                _("File &contents")),
            `VSpacing (2)
	), `HSpacing (2));

	// dialog caption
        string caption = _("Expert manual configuration");
        string help = BootCommon::getExpertManualHelp ();

        list exits = getExitEvents ([]);

        Wizard::SetContentsButtons (caption, contents, help,
            BackButtonLabel (), OKButtonLabel ());

	string filename = filenames[0]:"";
	if (default != "")
	    filename = default;
	if (size (files) > 1)
	    UI::ChangeWidget (`id (`filename), `Value, filename);
	UI::ChangeWidget (`id (`file), `Value, files[filename]:"");

        any ret = nil;
        while (! contains (exits, ret))
        {
            ret = UI::UserInput ();
	    if (ret == `filename)
	    {
		files[filename] = UI::QueryWidget (`id (`file), `Value);
		filename = UI::QueryWidget (`id (`filename), `Value);
		UI::ChangeWidget (`id (`file), `Value, files[filename]:"");
	    }
	    if (ret == `next)
	    {
		files[filename] = UI::QueryWidget (`id (`file), `Value);
		Bootloader::blSetFiles (files);
	    }
        }
        return ret;
    }


    /**
      * Get generic aliases
      * @return map aliases
      */
    global define map getAliases () ``{
	return $[
	    "summary" : ``(runSummaryDialog ()),
// general routines
	    "fetch" : [``(BootCommon::fetchSettings ()), true],
	    "store" : [``(BootCommon::storeSettings ()), true],
// expert edit dialog
	    "editfiles" : ``(runEditFilesDialog ()),
// global settings dialogs
	    "globals" : ``(runGlobalsDialog ()),
	    "target" : ``(runTargetDialog ()),
// sections managment dialogs
	    "sects" : ``(runSectionsDialog ()),
	    "singlesect" : ``(runSingleSectionDialog ()),
// sequences definitions
	    "global_seq" :
		``(WizardSequencer (aliases, ws_data["glob_seq"]:$[])),
	    "sect_seq" :
		``(WizardSequencer (aliases, ws_data["sect_seq"]:$[])),
	];
    }


    /**
      * Run wizard sequencer
      * @return `next, `back or `abort
      */
    global define symbol runWizard () ``{

	map glob_seq = $[
	    "ws_start" : "fetch",
	    "fetch" : $[ `next : "globals", `abort: `abort],
	    "globals" : $[ `next: "target", `abort: `abort ],
	    "target" : $[ `next: "store", `abort: `abort ],
	    "store" : $[ `next: `next, `abort: `abort ],
	];

	map sect_seq = $[
	    "ws_start" : "fetch",
	    "fetch" : $[ `next : "sects", `abort: `abort],
	    "sects" : $[ `next: "store", `add : "singlesect",
		`edit : "singlesect", `abort: `abort ],
	    "singlesect" : $[ `next: "sects", `abort: `abort],
	    "store" : $[ `next: `next, `abort: `abort ],
	];

	map normal_sequence = $[
	    "ws_start" : "summary",
	    "summary" : $[
		`next: `next,
		`abort: `abort,
		`glob : "global_seq",
		`manual : "editfiles",
		`sections : "sect_seq",
	     ],
	    "editfiles" : $[ `next : "summary", `abort: `abort ],
	    "global_seq" : $[ `next : "summary", `abort: `abort ],
	    "sect_seq" : $[ `next : "summary", `abort: `abort ],
	];

	map ws_data = $[
	    "start_seq" : "startseq",
	    "startseq" : normal_sequence,
	    "glob_seq" : glob_seq,
	    "sect_seq" : sect_seq,
	];

	// add specific aliases and modify sequence if needed
	ws_data = Bootloader::blGetSequence (ws_data);

	map aliases = getAliases ();
	// merge new aliases
	foreach (`k, `v, ws_data["aliases"]:$[], ``{
	    aliases[k] = v;
	});
	string start_seq = ws_data["start_seq"]:"";
	map sequence = ws_data[start_seq]:$[];

	// run wizard
	y2milestone ("Starting wizard sequencer");
	return WizardSequencer (aliases, sequence);
    }

}
