/**
 * File:
 *      include/bootloader/routines/widgets.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Common widgets for being used by several bootloaders
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */


{

    textdomain "bootloader";

    import "Label";
    import "BootCommon";
    import "Mode";
    import "Storage";
    import "StorageDevices";
    import "TablePopup";
    include "bootloader/routines/popups.ycp";
    include "bootloader/routines/options.ycp";


    /**
      * Get map of dialogs and widgets
      * @return map of dialogs and widgets
      */
    global define map GetWidgetMaps () ``{
	return $[
	    "sections"		: BootCommon::getSectionsWidget (),
	    "singlesection"	: BootCommon::getSingleSectionWidget (),
	    "globalsection"	: BootCommon::getGlobalSectionWidget (),
	    "resetbutton"	: BootCommon::getResetButtonWidget (),
	    "manual_edit_button": BootCommon::getManualEditWidget (),
	];
    }

    /**
      * Generic version of FixSequence function
      * Just leave everything as is
      * @param ws_data map default wizard sequencer data
      * @return map updated wizard sequencer data
      */
    global define map FixSequence (map ws_data) ``{
	return ws_data;
    }


// sections managment widget

    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getSectionsWidget () ``{
	return $[
	    "widget" : `custom,
	    "custom_widget" : `VBox (
		`HBox (
			`Table (`id (`sects), `opt (`keepSorting, `immediate, `notify), `header (
			// table header
			_("Def."),
			// table header
			_("Label"),
			// table header
			_("Type"),
			// table header
			_("Image / Device")
			), []),
		    `HSpacing (1),
		    `VBox (
			`VStretch (),
			// pushbutton
			`PushButton (`id (`up), _("&Up")),
			// pushbutton
			`PushButton (`id (`down), _("&Down")),
			`VStretch ()
		    )
		),
		`HBox (
		    `PushButton (`id (`add), `opt (`key_F3), Label::AddButton ()),
		    `PushButton (`id (`edit), `opt (`key_F4), Label::EditButton ()),
		    `PushButton (`id (`delete), `opt (`key_F5), Label::DeleteButton ()),
		    `HStretch (),
			// pushbutton
		    `PushButton (`id (`default), _("Set as De&fault"))
		)
	    ),
	    "init" : ``(BootCommon::sectionsInit ()),
	    "handle" : ``(BootCommon::sectionsHandle ()),
	    "store" : ``(BootCommon::sectionsStore ()),
	    "help" : getSectionsHelp (),
	    "exits" : [`add, `edit],
	    "key_only_once" : true,
	];
    }

    /**
      * Refresh and redraw widget wits sections
      * @param sects list of current sections
      */
    global define void sectionsRedrawTable (list sects) ``{
	boolean elilo = getLoaderType (false) == "elilo";
	list sec = maplist (map s, sects, ``{
	    string image = lookup_value (s, "image", nil);
	    string root = lookup_value (s, "root", "");
            return `item (`id (lookup_value (s, "label", "")),
                tolower (lookup_value (current_globals, "default", ""))
			== tolower (lookup_value (s, "label", ""))
                    ? UI::Glyph (`CheckMark) : "",
                lookup_value (s, "label", ""),
                image == nil ? _("other") : _("image"),
                (image != "" && image != nil)
                ? sformat ("%1   (%2%3)",
                    image,
                    elilo
			? ""
			: select (BootCommon::splitPath (image), 0, ""),
                    root == "" ? ""
                        : ((elilo ? "" : ", ")
			    + sformat ("root=%1", root)))
                : lookup_value (s, "other", "")
            );
        });
	UI::ChangeWidget (`id (`sects), `Items, sec);
    }

    /**
      * Restore function of widget
      */
    global define void sectionsInit (any widget) ``{
	sectionsRedrawTable (BootCommon::current_sections);
	UI::SetFocus (`id (`sects));
    }

    /**
      * Handle function of widget
      * @param op any operation to handle
      * @param save boolean true if op should lead to closing & saving widget
      * @return symbol changed op (if needed)
      */
    global define symbol sectionsHandle (any widget, map event) ``{
	any op = event["ID"]:nil;
	y2milestone ("Handling event %1", op);
	string current = UI::QueryWidget (`id (`sects), `CurrentItem);
	integer counter = 0;
	integer index = 0;
	foreach (`s, BootCommon::current_sections, ``{
	    if (lookup_value (s, "label", "") == current)
		index = counter;
	    counter = counter + 1;
	});
	list sects = BootCommon::current_sections;
	if (op == `up)
	{
	    if (index > 0)
	    {
		sects = swapItems(sects, index, index - 1);
		index = index - 1;
		BootCommon::current_sections = sects;
		sectionsRedrawTable (sects);
		UI::ChangeWidget (`id (`sects), `CurrentItem,
		    sects[index, "label"]:0);
		BootCommon::sections_changed = true;
	    }
	}
	else if (op == `down)
	{
	    if (index < (size(sects) - 1))
	    {
		sects = swapItems(sects, index, index + 1);
                index = index + 1;
		BootCommon::current_sections = sects;
		sectionsRedrawTable (sects);
		UI::ChangeWidget (`id (`sects), `CurrentItem,
		    sects[index, "label"]:0);
		BootCommon::sections_changed = true;
	    }
	}
	else if (op == `default)
	{
	    addValueToBootloaderSection (`current_globals, "default", current);
	    sectionsRedrawTable (sects);
	    UI::ChangeWidget (`id (`sects), `CurrentItem, current);
	    BootCommon::sections_changed = true;
	}
	else if (op == `add)
	{
	    list selected = sects[index]:[];
	    string name = lookup_value (selected,
		BootCommon::getSectionTitle (), "");
	    if (askClone (name))
	    {
		selected = modifySection (
		    eval (selected),
		    BootCommon::getSectionTitle (),
		    BootCommon::getFreeSectionLabel ());
		BootCommon::current_section = selected;
	    }
	    else
	    {
		BootCommon::current_section = BootCommon::convertSection
		    (nil, "image", nil);
	    }
	    BootCommon::current_section_name = "";
	    BootCommon::one_section_changed = true;
	    return `add;
	}
	else if (op == `edit)
	{
	    y2milestone ("Editing title %1, index %2", current, index);
	    BootCommon::current_section = eval (sects[index]:$[]);
	    BootCommon::current_section_name
		= lookup_value (sects[index]:[], "label", "");
	    BootCommon::one_section_changed = false;
	    return `edit;
	}
	else if (op == `delete && confirmSectionDeletePopup (current))
	{
	    sects = remove (sects, index);
	    if (current ==lookup_value (current_globals,
		"default", ""))
	    {
		addValueToBootloaderSection (`current_globals, "default",
		    lookup_value (sects[0]:[], "label", ""));
	    }
	    BootCommon::current_sections = sects;
	    sectionsRedrawTable (sects);
	    BootCommon::sections_changed = true;
	}
	UI::SetFocus (`id (`sects));
	return nil;
    }

    global define void sectionsStore (any widget, map event) ``{
	any op = event["ID"]:nil;
	if (op != `edit && op != `add)
	{
	    if (BootCommon::sections_changed)
	    {
		BootCommon::changed = true;
		BootCommon::markGeneralOptionChanged ("__sections");
		BootCommon::markGeneralOptionChanged ("default");
	    }
	}

    }


    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getSingleSectionWidget () ``{
	return TablePopup::CreateTableDescr (
	    $["add_delete" : true, "up_down_buttons" : false, "changed_column" : true],
	    $[
		"store" : ``(BootCommon::singleSectionStore ()),
		"options": BootCommon::GetOptionMaps (),
		"id2key": ``(BootCommon::id2key ()),
		"ids": ``(BootCommon::getTableContents ()),
                "help": getSingleSectionHelp (),
                "fallback" : $[
                    "init": ``(BootCommon::commonPopupInit ()),
                    "store": ``(BootCommon::commonPopupSave ()),
                    "summary": ``(BootCommon::commonTableEntrySummary ()),
                    "changed" : ``(BootCommon::commonTableChanged ()),
                ],
		"handle" : ``(BootCommon::singleSectionHandle ()),
                "option_delete": ``(BootCommon::commonTableEntryDelete ()),
                "add_items":  lookup (GetOptions (), `global, []), // FIXME
	    ]
	);
    }

    global define symbol singleSectionHandle (any widget_key, map event) ``{
	redraw_table = false;
	map current_table = CWM::GetProcessedWidget ();
	symbol ret = TablePopup::TableHandle (current_table, widget_key, event);
	if (redraw_table)
	{
	    TablePopup::TableInit (current_table, widget_key);
	}
	return ret;
    }

    global define void singleSectionStore (any widget_key, map event) ``{
	string ls = getSectionTitle ();
	string old_name = current_section_name;
	y2milestone ("Old name: %1", old_name);
	map intern = lookup_value (current_section, "__intern__", $[]);
	intern["changed"] = true;
	current_section = modifySection (current_section, "__intern__", intern);
	boolean found = false;
	BootCommon::current_sections = maplist (`s, current_sections, ``{
	    if (lookup_value (s, ls, "") == old_name)
	    {
		found = true;
		return BootCommon::current_section;
	    }
	    else
	    {
		return s;
	    }
	});
	if (! found)
	{
	    current_sections = add (current_sections, current_section);
	    }
	y2milestone ("Saving section");
	if (one_section_changed)
	    sections_changed = true;

	if (getDefaultType () == `label
	    && tolower (current_section_name)
		    == tolower (lookup_value (current_globals, getDefaultKey (), "")))
	{
	    current_globals = modifySection (
		current_globals,
		getDefaultKey (),
		lookup_value (current_section, getSectionTitle (), ""));
	}
    }

    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getGlobalSectionWidget () ``{
	return TablePopup::CreateTableDescr (
	    $["add_delete" : true, "up_down_buttons" : false, "changed_column" : true],
	    $[
		"init" : ``(BootCommon::globalSectionInit ()),
		"handle" : ``(BootCommon::globalSectionHandle ()),
		"store" : ``(BootCommon::globalSectionStore ()),
		"options": BootCommon::GetOptionMaps (),
		"id2key": ``(BootCommon::id2key ()),
		"ids": ``(BootCommon::getTableContents ()),
                "help": getGlobalSectionHelp (),
                "fallback" : $[
                    "init": ``(BootCommon::commonPopupInit ()),
                    "store": ``(BootCommon::commonPopupSave ()),
                    "summary": ``(BootCommon::commonTableEntrySummary ()),
                    "changed" : ``(BootCommon::commonTableChanged ()),
                ],
                "option_delete": ``(BootCommon::commonTableEntryDelete ()),
                "add_items":  lookup (GetOptions (), `global, []),
	    ]
	);
    }

    global define void globalSectionInit (any widget_key) ``{
	current_section = eval (globals);
	current_section_name = `global;
	TablePopup::TableInitWrapper (widget_key);
    }

    global define symbol globalSectionHandle (any widget_key, map event) ``{
	redraw_table = false;
	map current_table = CWM::GetProcessedWidget ();
	symbol ret = TablePopup::TableHandle (current_table, widget_key, event);
	if (redraw_table)
	{
	    return `redraw;
	}
	return ret;
    }

    global define void globalSectionStore (any widget_key, map event) ``{
	if (event["ID"]:nil == `redraw)
	    return;
	globals = current_section;
	if (one_section_changed)
	    changed = true;
    }


    /**
      * Create a list of options for the table
      * @return list of option ids as it should be displayed
      */
    global define list getTableContents (map descr) ``{
	if (BootCommon::getLoaderType (false) == "none")
	    return [$["key":"__loader_type"]];
	list prependlist = [];
	list forbidden_keys = [];
	any type = BootCommon::getSectionType (BootCommon::current_section);
	if (type == `global)
	{
	    prependlist = ["__loader_type", "__sep2", "__location",
		"default", "__sections", "__activate", "__repl_mbr",
		"__backup_mbr", "__save_method", "__sep1"];
	    forbidden_keys = ["boot", "default"];
	}
	else
	{
	    prependlist = ["label", "__section_type", "__sep1"];
	}
	if (Mode::initial)
	{
	    prependlist = filter (`p, prependlist, ``(p != "__save_method"));
	}
	forbidden_keys = merge (forbidden_keys, prependlist);
	forbidden_keys = add (forbidden_keys, "__intern__");
	integer index = -1;
	map remap_prepend = $[];
	list options = maplist (map opt, BootCommon::current_section, ``{
	    index = index + 1;
	    if (contains (prependlist, opt["key"]:""))
	    {
		remap_prepend[opt["key"]:""] = index;
		return nil;
	    }
	    return contains (forbidden_keys, opt["key"]:"")
		? nil
		: index;
	});
	prependlist = maplist (`e, prependlist, ``(remap_prepend[e]:e));
	options = filter (any opt, options, ``(opt != nil));
	return merge (prependlist, options);
    }

    /**
      * Transform table entry id to option id
      * @param table map table description
      * @param id any entry id
      * @return any option key
      */
    global define any id2key (map table, any opt_id) ``{
	if (is (opt_id, string))
	{
	    if (substring (opt_id, 0, 5) == "__sep")
		return "____sep";
	    return opt_id;
	}
	integer index = opt_id;
	return BootCommon::current_section[index, "key"]:"";
    }

    /**
      * Get the popup widget description map
      * @param opt_key any option key
      * @return map popup description map
      */
    global define map key2descr (any opt_key) ``{
        map ret = popups[opt_key]:nil;
        if (ret != nil)
            return ret;
        return $[
                "init" : ``(BootCommon::commonPopupInit ()),
                "store" : ``(BootCommon::commonPopupSave ()),
        ];
    }

    global define boolean commonTableChanged (any opt_id, any opt_key) ``{
	if (is (opt_id, integer))
	{
	    integer index = opt_id;
	    return current_section[index, "changed"]:false;
	}
	else if (is (opt_id, string))
	{
	    string key = opt_id;
	    map intern = lookup_value (current_section, "__intern__", $[]);
	    list ch = intern["changed_opts"]:[];
	    return contains (ch, opt_id);
	}
	return false;
    }

    global define string commonTableEntrySummary (any opt_id, any opt_key) ``{
	if (is (opt_id, integer))
	{
	    if (is (BootCommon::current_section[opt_id, "value"]:"", boolean))
	    {
		return BootCommon::current_section[opt_id, "value"]:""
		    // table item
		    ? _("Yes")
		    // table item
		    : _("No");
	    }
	    return sformat ("%1",
		BootCommon::current_section[opt_id, "value"]:"");
	}
	return "";
    }

    global define boolean commonTableEntryDelete (any opt_id, any opt_key) ``{
	if (! confirmOptionDeletePopup ())
	    return false;
	if (! is (opt_id, integer))
	    return false;

	integer index = opt_id;
	current_section = remove (current_section, index);
	one_section_changed = true;
	return true;
    }

    global define void commonPopupInit (any opt_id, any opt_key) ``{
	integer index = opt_id;
	if (index != nil)
	{
	    UI::ChangeWidget (`id (opt_key), `Value,
		BootCommon::current_section[opt_id, "value"]:"");
	}
	UI::SetFocus (`id (opt_key));
    }

    global define void commonPopupSave (any opt_id, any opt_key) ``{
	any value = UI::QueryWidget (`id (opt_key), `Value);
	one_section_changed = true;
	if (opt_id == nil) // append
	{
	    current_section = appendValue (current_section, opt_key, value);
	}
	else if (is (opt_id, integer))
	{
	    integer index = opt_id;
	    current_section[index, "value"] = value;
	    current_section[index, "changed"] = true;
	}
    }

    global define any moveTableItem (any opt_id, any opt_key, symbol dir)``{
	if (! is (opt_id, integer))
	    return nil;

	integer index = opt_id;
	map reordered = filterOrder (current_section, cwm_options, index);

	if (reordered["items"]:nil == nil || reordered["index"]:nil == nil)
	    return nil;

	index = reordered["index"]:nil;
	list items = reordered["items"]:nil;

	if (dir == `up)
	{
	    BootCommon::current_section = BootCommon::swapItems (
		items, index, index - 1);
	    BootCommon::one_section_changed = true;
	    if (index > 0)
		return index - 1;
	    else
		return index;
	}
	if (dir == `down)
	{
            BootCommon::current_section = BootCommon::swapItems (
		items, index, index + 1);
	    BootCommon::one_section_changed = true;
	    if (index + 1 < size (items))
		return index + 1;
	    else
		return index;
	}
	return nil;
    }

    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getResetButtonWidget () ``{
	return $[
	    "widget" : `custom,
	    "custom_widget" : `VSpacing (0),
	    "handle" : reset_button_handle,
	    "init" : ``(BootCommon::resetButtonInit ()),
	    "help" : getSummaryButtonsHelp (),
	    "key_only_once" : true,
	];
    }

    /**
      * Restore function of widget
      */
    global define void resetButtonInit (any widget_id) ``{
	list items = [];
	if (getBooleanAttrib ("propose"))
	{
	    items = add (items,
		// menubutton item, keep as short as possible
		`item (`id (`propose), _("&Propose New Configuration")));
	}
	if (getBooleanAttrib ("scratch"))
	{
	    items = add (items,
		// menubutton item, keep as short as possible
		`item (`id (`scratch), _("&Start from Scratch")));
	}
        if ((Mode::normal || Mode::config || Mode::repair)
	    && getBooleanAttrib ("read"))
	{
	    items = add (items,
		// menubutton item, keep as short as possible
		`item (`id (`reread), _("&Reread Configuration from Disk")));
	}
	list additional_entries = getAnyTypeAttrib ("additional_entries", []);
	items = merge (items, additional_entries);

	if ((Mode::normal || Mode::repair)
	    && getBooleanAttrib ("restore_mbr")
	    && SCR::Read (.target.size, "/boot/backup_mbr") > 0)
	{
	    items = add (items,
		// menubutton item, keep as short as possible
		`item (`id (`restore_mbr), _("Restore MBR of Hard Disk")));
	}

	if (size (items) > 0)
	{
	    UI::ReplaceWidget (`id (`_tp_table_repl),
		// menu button
		`MenuButton (`id (`reset), _("Res&et"), items));
	}
	else
	{
	    UI::ReplaceWidget (`id (`_tp_table_repl), `VSpacing (0));
	}

    }

    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getManualEditWidget () ``{
	return $[
	    "widget" : `custom,
	    "custom_widget" : `HBox (`HStretch (),
		// pushbutton
		`PushButton (`id (`manual), _("E&dit Configuration Files")),
		`HStretch ()
	    ),
	    "handle_events" : [`manual],
	    "handle" : ``(BootCommon::manualEditHandle ()),
	    "help" : getManualEditHelp (),
	    "key_only_once" : true,
	];
    }

    global define symbol manualEditHandle(any key, map event)``{
	return `manual;
    }

    /**
      * Get map of widget
      * @return map of widget
      */
    global define map getMessageWidget () ``{
	return $[
	    "delete" : ``(BootCommon::deleteMessage ()),
	    "key_only_once" : true,
	];
    }

    /**
      * Delete function of widget
      */
    global define void deleteMessage () ``{
	BootCommon::current_section = filter (`e, BootCommon::current_section,
	    ``(e["key"]:"" != "__intern__"));
    }

} // include end
