/**
 * File:
 *      include/bootloader/routines/widgets.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Common widgets for being used by several bootloaders
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */


{

    include "ui/common_messages.ycp";
    include "bootloader/routines/popups.ycp";

    /**
      * Get map of dialogs and widgets
      * @return map of dialogs and widgets
      */
    global define map GetWidgets () ``{
	return $[
//		"target": getTargetWidget (),
		"experttarget" : getExpertWidget (),
		"prompt" : getPromptWidget (),
//		"passwd" : getPasswdWidget (),
//		"loader" : getLoaderSelectionWidget (),
		"sections" : getSectionsWidget (),
		"singlesection" : getSingleSectionWidget (),
		"globalsection" : getGlobalSectionWidget (),
		"summarybuttons" : getSummaryButtonsWidget (),
		"tableentries" : $[
		    `location: getTargetWidget (),
		    `loader_type : getLoaderSelectionWidget (),
		    `sections : getSectionsTableEntry (),
		    `default_section : getDefaultSectionTableEntry (),
		    `section_type : getSectionTypeWidget (),
		    `sep1 : $["label" : "---------------"],
		    `sep2 : $["label" : "---------------"],
		    `sep3 : $["label" : "---------------"],
		    "label" : getLabelWidget (),
		    "alias" : getAliasWidget (),
		    "timeout" : getTimeoutWidget (),
		    "password" : getPasswdWidget (),
		    `repl_mbr : getReplMbrWidget (),
		    "activate" : getActivateWidget (),
		    "message" : getMessageWidget (),
		],
	];
    }

    /**
      * Generic version of FixSequence function
      * Just leave everything as is
      * @param ws_data map default wizard sequencer data
      * @return map updated wizard sequencer data
      */
    global define map FixSequence (map ws_data) ``{
	return ws_data;
    }

// Bootloader target widget

    /**
      * Get map of Target widget
      * @return map of Target widget
      */
    global define map getTargetWidget () ``{
        term targetlist = `VBox (
            `VSpacing (0.4),
            `Left (`RadioButton (`id ("mbr"), `opt (`notify),
                sformat(_("&Master boot record of %1"), mbrDisk),
                (location == "mbr")
            )),
            `VSpacing (0.4),
            `Left (`RadioButton (`id ("boot"), `opt (`notify),
                sformat(_("Boot&sector of boot partition %1"),
                     BootPartitionDevice),
                (location == "boot")
            )),
            `VSpacing (0.4),
            `Left (`RadioButton (`id ("root"), `opt (`notify),
                sformat(_("Bootsector of roo&t partition %1"),
                    RootPartitionDevice),
                (location == "root")
            ))
        );

        if (StorageDevices::FloppyPresent)
        {
            targetlist = add (targetlist, `VSpacing (1));
            targetlist = add (targetlist, `Left (`RadioButton (`id ("floppy"),
		 `opt (`notify),
                _("&Floppy disk"),
                (location == "floppy")
            )));
        }

        targetlist = add (targetlist, `HBox (
            `VBox (`Label (""), `RadioButton (`id ("custom"), `opt (`notify),
		 _("&Other"),
                (location == "custom"))),
            `HSpacing (2),
            `VBox (
                `ComboBox (`id (`loc), `opt (`editable, `hstretch, `notify), "",
                    getPartitionList(`boot)),
                `HSpacing (15)
            ),
            `HStretch ()
        ));

        targetlist = add (targetlist, `VSpacing (0.4));

        term widget = `Frame (_("Bootloader location"),
            `RadioButtonGroup (`id (`location),
                targetlist
            )
        );
	return $[
	    "widget" : widget,
	    "restore" : ``(BootCommon::targetRead ()),
	    "handle" : ``(BootCommon::targetWrite ()),
	    "help" : getLocationsHelp (),
	    "validate" : ``(BootCommon::targetValidate ()),
	    "label" : _("Bootloader location"),
	    "summary" : ``(BootCommon::locationSummary ()),
	    "deletable" : false,
	    "ordering" : false,
	];
    }

    /**
      * Restore settings of Target widget
      */
    global define void targetRead () ``{
	UI::ChangeWidget (`id (`loc), `Value, tmp_store["loader_device"]:"");
	y2milestone ("tmp_store: %1", tmp_store);
	UI::ChangeWidget (`id (`location), `CurrentButton,
	    tmp_store["location"]:"");
    }

    /**
      * Handle event of dialog containing Target widget
      * @param op symbol of event
      * @return symbol of event
      */
    global define void targetWrite (any op, list tosave) ``{
	if (! contains (tosave, op))
	    return;
	tmp_store["location"]
	    = UI::QueryWidget (`id (`location), `CurrentButton);
	tmp_store["loader_device"] = UI::QueryWidget (`id (`loc), `Value);
	BootCommon::storeSettings ();
	tmp_store["loader_device"] = BootCommon::GetBootloaderDevice ();
	BootCommon::location_changed = true;
	return;
    }

    /**
      * Validate the target widget
      * @return true if everything is OK
      */
    global define boolean targetValidate () ``{
	string rb = UI::QueryWidget (`id (`location), `CurrentButton);
	if (rb == nil)
	{
	    setLocationErrorPopup ();
	    UI::SetFocus (`id (`location));
	    return false;
	}
	if (rb == "custom" && UI::QueryWidget (`id (`loc), `Value) == "")
	{
	    setLocationErrorPopup ();
	    UI::SetFocus (`is (`loc));
	    return false;
	}
	return true;
    }

    global define boolean locationSummary () ``{
	map targetMap = Storage::GetTargetMap ();
	map boot_target = targetMap[loader_device]:$[];
	string target_name = "";
	if (boot_target == $[])
	    target_name = loader_device;
	else
	    target_name = boot_target["name"]:"disk";
	return target_name;
    }


// bootlaoder loaction expert settings widget

    /**
      * Get expert widget
      * @return map of Expert widget
      */
    global define map getExpertWidget () ``{
	term widget = `Frame (_("Expert settings"), `VBox (
                    `Left (`CheckBox (`id (`activ),
                        _("&Activate bootloader partition"))),
                    `Left (`CheckBox (`id (`replmbr),
                        _("R&eplace MBR with generic code")))
            ));
        return $[
            "widget" : widget,
            "restore" : ``(BootCommon::expertRead ()),
            "handle" : ``(BootCommon::expertWrite ()),
            "help" : BootCommon::getExpertLocationHelp (),
        ];

    }

    /**
      * Restore settings of Expert widget
      */
    global define void expertRead () ``{
	BootCommon::expertWrite ("", []);
	UI::ChangeWidget (`id (`replmbr), `Value,
	    BootCommon::tmp_store["repl_mbr"]:false);
	UI::ChangeWidget (`id (`activ), `Value,
	    BootCommon::tmp_store["activate"]:false);
    };

    /**
      * Handle event of dialog containing Expert widget
      * @param op symbol of event
      * @return symbol of event
      */
    global define symbol expertWrite (any op, list tosave) ``{
	string loc = UI::QueryWidget (`id (`location), `CurrentButton);
	string dev = UI::QueryWidget (`id (`loc), `Value);
	if (is (op, string) || op == `loc)
	{
	    if (loc == "mbr"
		|| (loc == "custom" && dev == mbrDisk))
	    {
		UI::ChangeWidget (`id (`replmbr), `Enabled, false);
		UI::ChangeWidget (`id (`replmbr), `Value, false);
	    }
	    else
	    {
		UI::ChangeWidget (`id (`replmbr), `Enabled, true);
	    }
	}
	if (contains (tosave, op))
	{
	    BootCommon::tmp_store["activate"]
		= UI::QueryWidget (`id (`activ), `Value);
	    BootCommon::tmp_store["repl_mbr"]
		= UI::QueryWidget (`id (`replmbr), `Value);
	}
	return op;
    }

// password widget


    global define map getPasswdWidget () ``{
	return $[
	    "widget" : `Frame (_("Security settings"), `VBox (
                `Left (`CheckBox (`id (`usepas), `opt (`notify),
                    _("&Enable bootloader password protection"))),
                `HBox (
                    `HWeight (1, `Password (`id (`pw1), _("&Password"))),
                    `HSpacing (2),
                    `HWeight (1, `Password (`id (`pw2), _("Re&type password")))
                ),
                `VSpacing (0.4)
            )),
	    "restore" : ``(BootCommon::restorePasswdWidget ()),
	    "handle" : ``(BootCommon::handlePasswdWidget ()),
	    "validate" : ``(BootCommon::validatePasswdWidget ()),
	    "help" : getPasswdHelp (),
	    "summary" : ``(BootCommon::getPasswdSummary ()),
	];
    }

    global define void restorePasswdWidget () ``{
	string passwd = tmp_store["globals", "password"]:nil;
	if (passwd == nil)
	{
	    UI::ChangeWidget (`id (`usepas), `Value, false);
	    UI::ChangeWidget (`id (`pw1), `Enabled, false);
	    UI::ChangeWidget (`id (`pw1), `Value, "");
	    UI::ChangeWidget (`id (`pw2), `Enabled, false);
	    UI::ChangeWidget (`id (`pw2), `Value, "");
	}
	else
	{
	    UI::ChangeWidget (`id (`usepas), `Value, true);
	    UI::ChangeWidget (`id (`pw1), `Enabled, true);
	    UI::ChangeWidget (`id (`pw1), `Value, "**********");
	    UI::ChangeWidget (`id (`pw2), `Enabled, true);
	    UI::ChangeWidget (`id (`pw2), `Value, "**********");
	}
    }

    global define void handlePasswdWidget (any op, list tosave) ``{
	if (op == `usepas)
	{
	    boolean enabled = UI::QueryWidget (`id (`usepas), `Value);
	    UI::ChangeWidget (`id (`pw1), `Enabled, enabled);
	    UI::ChangeWidget (`id (`pw2), `Enabled, enabled);
	}
	else if (contains (tosave, op))
	{
	    boolean usepass = UI::QueryWidget (`id (`usepas), `Value);
	y2milestone ("Usepass: %1", usepass);
	    if (usepass)
	    {
		if (UI::QueryWidget (`id (`pw1), `Value) != "**********")
		    tmp_store["active_section", "password"]
		        = UI::QueryWidget (`id (`pw1), `Value);
	    }
	    else
	    {
		tmp_store["active_section"]
		    = remove (tmp_store["active_section"]:$[], "password");
	    }
	}
    }

    global define boolean validatePasswdWidget () ``{
	if (! UI::QueryWidget (`id (`usepas), `Value))
	    return true;
	if (UI::QueryWidget (`id (`pw1), `Value) == "")
	{
	    emptyPasswdErrorPopup ();
	    UI::SetFocus (`id (`pw1));
	    return false;
	}
	if (UI::QueryWidget (`id (`pw1), `Value)
	    == UI::QueryWidget (`id (`pw2), `Value)
	)
	    return true;
	passwdMissmatchPopup ();
	UI::SetFocus (`id (`pw1));
	return false;
    }

    global define string getPasswdSummary () ``{
	if (BootCommon::tmp_store["active_section", "password"]:nil != nil)
	    return _("Password will be needed");
	else
	    return _("No password will be needed");
    }


// boot prompt widget

    global define map getPromptWidget () ``{
	return $[
	    "widget" : `Frame (_("Prompt settings"), `VBox (
                `Left(`CheckBox (`id (`show_prompt), _("&Display prompt"))),
                `VSpacing (0.4),
                `Left(`HBox(`IntField(`id(`timeout), _("&Continue booting after ... seconds (0 means never)"), 0, 3600, 0), `HStretch())),
                `VSpacing (0.4)
            ))
	];
    }

// sections managment widget

    global define map getSectionsWidget () ``{
	return $[
	    "widget" : `VBox (
		`HBox (
		    `ReplacePoint (`id (`sects_rp),
			`Table (`id (`sects), `header (
			_("Def."), _("Label"), _("Type"), _("Image / Device")
			), [])
		    ),
		    `HSpacing (1),
		    `VBox (
			`VStretch (),
			`PushButton (`id (`up), _("&Up")),
			`PushButton (`id (`down), _("&Down")),
			`VStretch ()
		    )
		),
		`HBox (
		    `PushButton (`id (`add), AddButtonLabel ()),
		    `PushButton (`id (`edit), EditButtonLabel ()),
		    `PushButton (`id (`delete), DeleteButtonLabel ()),
		    `HStretch (),
		    `PushButton (`id (`default), _("Set as de&fault"))
		)
	    ),
	    "restore" : ``(BootCommon::sectionsRead ()),
	    "handle" : ``(BootCommon::sectionsHandle ()),
	    "help" : getSectionsHelp (),
	    "exits" : [`add, `edit],
	];
    }

    global define void sectionsRedrawTable (list sects) ``{
	list sec = maplist (map s, sects, ``{
            return `item (`id (s["label"]:""),
                BootCommon::tmp_store["globals", "default"]:""
			== s["label"]:""
                    ? UI::Glyph (`CheckMark) : "",
                s["label"]:"",
                s["image"]:"" == "" ? _("other") : _("image"),
                s["image"]:"" != ""
                ? sformat ("%1   (%2%3)",
                    s["image"]:"",
                    select (BootCommon::splitPath (s["image"]:""), 0, ""),
                    s["root"]:"" == "" ? ""
                        : sformat (", root=%1", s["root"]:""))
                : s["other"]:""
            );
        });
	UI::ReplaceWidget (`id (`sects_rp),
	    `Table (`id (`sects), `header (
		_("Default"), _("Label"), _("Type"), _("Image / Device")
	    ), sec)
	);
    }

    global define void sectionsRead () ``{
	sectionsRedrawTable (BootCommon::tmp_store["sections"]:[]);
    }

    global define symbol sectionsHandle (any op, list tosave) ``{
	y2milestone ("Handling event %1", op);
	string current = UI::QueryWidget (`id (`sects), `CurrentItem);
	integer counter = 0;
	integer index = 0;
	foreach (`s, BootCommon::tmp_store["sections"]:[], ``{
	    if (s["label"]:"" == current)
		index = counter;
	    counter = counter + 1;
	});
	list sects = BootCommon::tmp_store["sections"]:[];
	if (op == `up)
	{
	    if (index > 0)
	    {
		sects = swapItems(sects, index, index - 1);
		index = index - 1;
		BootCommon::tmp_store["sections"] = sects;
		sectionsRedrawTable (sects);
		UI::ChangeWidget (`id (`sects), `CurrentItem,
		    sects[index, "label"]:0);
	    }
	}
	else if (op == `down)
	{
	    if (index < (size(sects) - 1))
	    {
		sects = swapItems(sects, index, index + 1);
                index = index + 1;
		BootCommon::tmp_store["sections"] = sects;
		sectionsRedrawTable (sects);
		UI::ChangeWidget (`id (`sects), `CurrentItem,
		    sects[index, "label"]:0);

	    }
	}
	else if (op == `default)
	{
	    BootCommon::tmp_store["globals", "default"] = current;
	    sectionsRedrawTable (sects);
	    UI::ChangeWidget (`id (`sects), `CurrentItem, current);
	}
	else if (op == `add)
	{
	    BootCommon::tmp_store["active_section"] = $[];
	    BootCommon::tmp_store["active_section_name"] = "";
	    BootCommon::tmp_store["section_type"] = "image";
	    BootCommon::changed_settings[""] = $[];
	}
	else if (op == `edit)
	{
	    y2milestone ("Editing title %1, index %2", current, index);
	    BootCommon::tmp_store["active_section"] = eval (sects[index]:$[]);
	    BootCommon::tmp_store["active_section_name"]
		= sects[index, "label"]:"";
	    BootCommon::tmp_store["section_type"]
		= sects[index, "image"]:"" == "" ? "other" : "image";
	}
	else if (op == `delete && confirmSectionDeletePopup (current))
	{
	    sects = remove (sects, index);
	    if (current == BootCommon::tmp_store["globals", "default"]:"")
	    {
		BootCommon::tmp_store["globals", "default"]
		    = sects[0, "label"]:"";
	    }
	    BootCommon::tmp_store["sections"] = sects;
	    sectionsRedrawTable (sects);
	}
	if (contains (tosave, op))
	{
	    BootCommon::markOptionChanged (`global, `sections);
	    BootCommon::markOptionChanged (`global, `default_section);
	}
    }

    global define map getLoaderSelectionWidget () ``{
        list loaders = maplist (`l, BootCommon::getBootloaders (), ``{
            return `item (`id (l), BootCommon::getLoaderName (l));
        });

	return $[
	    "widget" : (`ComboBox (`id (`loader_type), `opt (`notify),
                        _("Boot&loader type"), loaders
                    )),
	    "restore" : ``(BootCommon::loaderTypeRestore ()),
	    "handle" : ``(loaderTypeSave ()),
	    "help" : nil,
	    "exits" : [],
	    "label" : _("Bootloader type"),
	    "summary" : ``(BootCommon::loaderTypeSummary ()),
	    "deletable" : false,
	    "ordering" : false,
	];
    }

    global define void loaderTypeRestore () ``{
	UI::ChangeWidget (`id (`loader_type), `Value,
	    BootCommon::getLoaderType (false));
    }

    global define string loaderTypeSummary () ``{
	return BootCommon::getLoaderName (BootCommon::getLoaderType (false));
    }

    global define map getSingleSectionWidget () ``{
	return $[
	    "widget" : (`HBox (`HSpacing (2), `VBox (
		    `Table (`id (`settings), `opt (`notify, `keepSorting),
			`header (_("Ch."), _("Option"), _("Value")), []),
		    `HBox (
			`HStretch (),
			`PushButton (`id (`add), AddButtonLabel ()),
			`PushButton (`id (`edit), EditButtonLabel ()),
			`PushButton (`id (`delete), DeleteButtonLabel ()),
			`HStretch ()
		    )
		), `HSpacing (2))),
	    "restore" : ``(singleSectionRead ()),
	    "handle" : ``(singleSectionHandle ()),
	    "help" : getSingleSectionHelp (),
	    "exits" : [`sections],
	];
    }

    global define map getGlobalSectionWidget () ``{
	map ret = getSingleSectionWidget ();
	ret ["help"] = getGlobalSectionHelp ();
	return ret;
    }

    global define list UpdateOptionsList (map _options) ``{
	list options = maplist (`k, `v, _options, ``(k));
	any type = BootCommon::tmp_store["section_type"]:"";
	if (type == `global)
	{
	    options = filter (`o, options, ``(o != "boot" && o != "default"));
	    options = filter (`o, options, ``(o != "loader_type"
		&& o != "location" && o != "default_section" && o != "sections"
		&& o != `repl_mbr && o != "activate"
	    ));
	    options = prepend (options, `sep1);
	    options = prepend (options, `repl_mbr);
	    options = prepend (options, "activate");
	    options = prepend (options, `sections);
	    options = prepend (options, `default_section);
	    options = prepend (options, `location);
	    options = prepend (options, `sep2);
	    options = prepend (options, `loader_type);
	}
	else
	{
	    options = filter (`o, options, ``(o != "type" && o != "label"));
	    options = prepend (options, `sep1);
	    options = prepend (options, `section_type);
	    options = prepend (options, "label");
	}
	return options;
    }

    global define map getSummaryButtonsWidget () ``{
	list items = [
            `item (`id (`propose), _("&Propose new configuration")),
            `item (`id (`scratch), _("&Start from scratch")),
            `item (`id (`reread), _("&Reread configuration from disk")),
	];
	if (/*Mode::initial &&*/ BootCommon::getLoaderType (false) == "grub")
	    items = add (items, `item (`id (`propose_deep),
		_("Propose new configuration and merge existing menus")));
	return $[
	    "widget" : `HBox (`HStretch (),
		`MenuButton (`id (`restore), _("Res&et"), items),
                `PushButton (`id (`manual), _("Edit &configuration files"))
	    ),
	    "exits" : [`manual],
	    "handle" : ``(resetButtonHandle ()),
	    "help" : getSummaryButtonsHelp (),
	];
    }

    global define map getSectionsTableEntry () ``{
	return $[
	    "label" : _("Available sections"),
	    "summary" : ``(BootCommon::getSectionsSummary ()),
	    "deletable" : false,
	    "ordering" : false,
	];
    }

    global define string getSectionsSummary () ``{
	string default = BootCommon::globals["default"]:"";
        list sects = [];
        foreach (`s, BootCommon::sections, ``{
            string title = s["label"]:"";
            string def = title == default ? _(" (default)") : "";
            sects = add (sects, sformat ("%1%2", title, def));
        });
	return mergestring (sects, ", ");
    }

    global define map getDefaultSectionTableEntry () ``{
	return $[
	    "label" : _("Default section"),
	    "summary" : ``(BootCommon::getDefaultSectionSummary ()),
	    "deletable" : false,
	    "ordering" : false,
	];
    }

    global define string getDefaultSectionSummary () ``{
	return BootCommon::globals["default"]:"";
    }

    global define map getSectionTypeWidget () ``{
        return $[
            "widget" : (`ComboBox (`id (`section_type), `opt (`notify),
                        _("Section &type"), ["image", "other"]
                    )),
            "restore" : ``(BootCommon::sectionTypeRestore ()),
            "handle" : ``(BootCommon::sectionTypeSave ()),
            "help" : nil,
            "exits" : [],
            "label" : _("Section type"),
            "summary" : ``(BootCommon::sectionTypeSummary ()),
	    "deletable" : false,
	    "ordering" : false,
        ];
    }

    global define void sectionTypeRestore () ``{
	string key = BootCommon::getLoaderType (false) == "grub"
	    ? "kernel" : "image";
        UI::ChangeWidget (`id (`section_type), `Value,
	    BootCommon::tmp_store["active_section", key]:"" == ""
		? "other"
		: "image");
    }

    global define void sectionTypeSave (any op, list tosave) ``{
	if (! contains (tosave, op))
	    return;
        string ntype = UI::QueryWidget (`id (`section_type), `Value);
	string otype = BootCommon::tmp_store["active_section", "image"]:"" == ""
	    ? "other"
	    : "image";
	if (otype == ntype)
	    return;
	string label = BootCommon::tmp_store["active_section", "label"]:"";
	if (ntype == "other")
	{
	    map tmp = BootCommon::tmp_store["active_section"]:$[];
	    BootCommon::tmp_store["active_section"] = $["other":
		select (BootCommon::splitPath (tmp["image"]:""), 0, "")];
	}
	else
	{
	    map tmp = BootCommon::tmp_store["active_section"]:$[];
	    BootCommon::tmp_store["active_section"] = $[
		"image" : "/boot/vmlinuz",
		"root" : tmp["other"]:"",
	    ];
	}
	BootCommon::tmp_store["active_section", "label"] = label;
	BootCommon::tmp_store["section_type"] = ntype;
    }

    global define string sectionTypeSummary () ``{
	string key = BootCommon::getLoaderType (false) == "grub"
	    ? "kernel" : "image";
	return BootCommon::tmp_store["active_section", key]:"" == ""
	    ? "other"
	    : "image";
    }

    global define map getTimeoutWidget () ``{
	return $[
	    "restore" : ``(BootCommon::timeoutRestore ()),
	    "handle" : ``(BootCommon::timeoutSave ()),
	    "summary" : ``(BootCommon::timeoutSummary ()),
	];
    }

    global define void timeoutRestore () ``{
	integer timeout = BootCommon::tmp_store["active_section", "timeout"]:0;
	UI::ChangeWidget (`id (`value), `Value, timeout / 10);
    }

    global define void timeoutSave (any op, list tosave) ``{
	if (! contains (tosave, op))
	    return;
	integer timeout = UI::QueryWidget (`id (`value), `Value) * 10;
	BootCommon::tmp_store["active_section", "timeout"] = timeout;
    }

    global define void timeoutSummary () ``{
	integer timeout = BootCommon::tmp_store["active_section", "timeout"]:0;
	return sformat (_("%1 s"), timeout / 10);
    }

    global define map getLabelWidget () ``{
	return $[
	    "label" : "Section name",
	    "validate" : ``(BootCommon::labelValidate ()),
	    "deletable" : false,
	    "ordering" : false,
	];
    }

    global define boolean labelValidate () ``{
	list(string) existing = [];
	foreach (`s, BootCommon::tmp_store["sections"]:[], ``{
	    existing = add (existing, s["label"]:"");
	    existing = add (existing, s["alias"]:"");
	});
	existing = filter (string l, existing,
	    ``(l != BootCommon::tmp_store["active_section_name"]:""));
	existing = add (existing, "");
	string new = UI::QueryWidget (`id (`value), `Value);

	if (contains (existing, new))
	{
	    usedNameErrorPopup ();
	    return false;
	}
	return true;
    }

    global define map getAliasWidget () ``{
	map ret = getLabelWidget ();
	ret["deletable"] = true;
	ret["ordering"] = true;
        ret["validate"] = ``(BootCommon::labelValidate ());
        return ret;
    }

    global define map getReplMbrWidget () ``{
	return $[
	    "label" : _("Code in MBR"),
	    "restore" : ``(BootCommon::replMbrRestore ()),
	    "handle" : ``(BootCommon::replMbrHandle ()),
	    "summary" : ``(BootCommon::replMbrSummary ()),
	    "type" : "b",
	    "deletable" : false,
	    "ordering" : false,
// FIXME: maybe extra widget
	];
    }

    global define void replMbrRestore () ``{
	UI::ChangeWidget (`id (`value), `Value, tmp_store["repl_mbr"]:false);
    }

    global define void replMbrHandle (any op, list tosave) ``{
        if (! contains (tosave, op))
            return;
	tmp_store["repl_mbr"] = UI::QueryWidget (`id (`value), `Value);
    }

    global define string replMbrSummary () ``{
	if (tmp_store["repl_mbr"]:false)
	    return _("Replace with generic code");
	else
	    return _("Leave untouched");
    }

    global define string getActivateWidget () ``{
	return $[
	    "label" : _("Activate bootloader partition"),
	    "restore" : ``(BootCommon::activateRestore ()),
	    "handle" : ``(BootCommon::activateHandle ()),
	    "summary" : ``(BootCommon::activateSummary ()),
	    "type" : "b",
	    "deletable" : false,
	    "ordering" : false,
	];
    }

    global define void activateRestore () ``{
        UI::ChangeWidget (`id (`value), `Value, tmp_store["activate"]:false);
    }

    global define void activateHandle (any op, list tosave) ``{
        if (! contains (tosave, op))
            return;
        tmp_store["activate"] = UI::QueryWidget (`id (`value), `Value);
    }

    global define string activateSummary () ``{
        if (tmp_store["activate"]:false)
            return _("Yes");
        else
            return _("No");
    }

    global define map getMessageWidget () ``{
	return $[
	    "delete" : ``(BootCommon::deleteMessage ()),
	];
    }

    global define void deleteMessage () ``{
	BootCommon::tmp_store["active_section"] = remove
	    (BootCommon::tmp_store["active_section"]:$[], "__intern__");
    }


} // include end
