/**
 * File:
 *      include/bootloader/routines/popups.ycp
 *
 * Module:
 *      Bootloader installation and configuration
 *
 * Summary:
 *      Popups for being used inside bootloader configurator
 *
 * Authors:
 *      Jiri Srain <jsrain@suse.cz>
 *
 * $Id$
 *
 */


{

    textdomain "bootloader";

    include "ui/common_messages.ycp";

    import "Report";

    /**
      * Display question
      * @return boolean true if answered yes
      */
    global define boolean resetSectsPopup () ``{
	// yes-no popup question
	return UI::YesNoPopup (_("Do you really want to reset your sections
settings? All your changes made to sections managment will be lost."));
    }

    /**
      * Display question
      * @param title string section title
      * @return boolean true if answered yes
      */
    global define boolean confirmSectionDeletePopup (string title) ``{
	// yes-no popup question
	return UI::YesNoPopup (sformat(_("Do you rally want to delete section
%1?"), title));
    }

    /**
      * Display question
      * @return boolean true if answered yes
      */
    global define boolean resetAllPopup () ``{
	// yes-no popup question
	return UI::YesNoPopup (_("Do you rally want to reset all
your settings? All your changes will be lost."));
    }

    /**
      * Display error
      */
    global define void setLocationErrorPopup () ``{
	// error popup
	Report::Error (_("You must set bootloader location!!!"));
    }

    /**
      * Display error
      */
    global define void emptyPasswdErrorPopup () ``{
	// error popup
	Report::Error (_("You must set non-empty password"));
    }

    /**
      * Display error
      */
    global define void passwdMissmatchPopup () ``{
	// error popup
	Report::Error (_("'Password' and 'Retype password'
do not match. Retype the password."));
    }

    /**
      * Display popup about change of section
      * @param sect_name string section name
      */
    global define void displayDiskChangePopup (string sect_name) ``{
	// message popup, %1 is sectino label
	UI::MessagePopup (sformat (_("Disk settings changed,
please check section %1 settings"), sect_name));
    }

    /**
      * Display popup
      */
    global define void displayFilesEditedPopup () ``{
	// message popup
	UI::MessagePopup (_("Disk settings changed and you edited bootloader
configuration files manually, please check bootloader settings."));
    }

    /**
      * Ask for change of bootloader location because of device unavailability
      * @param device string currently confiogured device
      * @return boolean yes if shall be reset
      */
    global define boolean askLocationResetPopup (string device) ``{
	return UI::YesNoPopup(sformat(_("Partition '%1' is not available.
Do you want to set default boot loader location?"), device));
    }

    /**
      * Show the popup before saving to floppy, handle actions
      * @return true on success
      */
    global define boolean saveToFLoppyPopup () ``{
	boolean retval = true;
	boolean format = false;
	symbol fs = `no;
	list items = [
	    `item (`id (`no), _("Don't create filesystem")),
	    `item (`id (`ext2), _("Create ext2 filesystem")),
	];
	if (SCR::Read (.target.size, "/sbin/mkfs.msdos") != -1)
	   items = add (items, `item (`id (`fat), _("Create FAT filesystem")));
	term contents = `VBox (
	    `Label (_("The bootloader bootsector will be written
to a floppy disk. Insert a floppy disk
and confirm with OK.")),
	    `VSpacing (1),
	    `Left (`CheckBox (`id (`format), _("&Low level format"), false)),
	    `VSpacing (1),
	    `Left (`ComboBox (`id (`fs), _("&Create filesystem"), items)),
	    `VSpacing (1),
	    `PushButton (`id (`ok), OKButtonLabel ())
	);
	UI::OpenDialog (contents);
	any ret = nil;
	while (ret != `ok)
	{
	    ret = UI::UserInput ();
	}
	if (ret == `ok)
	{
	    format = UI::QueryWidget (`id (`format), `Value);
	    fs = UI::QueryWidget (`id (`fs), `Value);
	}
	UI::CloseDialog ();
	string dev = BootCommon::loader_device;
	if (format)
	{
	    boolean tmpretval = true;
	    y2milestone ("Low level formating floppy");
	    while (true)
	    {
		tmpretval = 0 == SCR::Execute
		    (.target.bash, sformat ("/usr/bin/fdformat %1", dev));
		if (tmpretval)
		    break;
		if (! UI::YesNoPopup (_("Low level format failed. Try again?")))
		    break;
	    }
	    retval = retval && tmpretval;
	}
	if (fs == `ext2)
	{
	    y2milestone ("Creating ext2 on floppy");
            boolean tmpretval = 0 == SCR::Execute
		(.target.bash, sformat ("/sbin/mkfs.ext2 %1", dev));
	    if (! tmpretval)
		Report::Error (_("Creating filesystem failed."));
            retval = retval && tmpretval;
        }
	else if (fs == `fat)
	{
	    y2milestone ("Creating msdosfs on floppy");
	    boolean tmpretval = 0 == SCR::Execute
		(.target.bash, sformat ("/sbin/mkfs.msdos %1", dev));
	    if (! tmpretval)
		Report::Error (_("Creating filesystem failed."));
	    retval = retval && tmpretval;
	}
	return retval;
    }

    /**
      * Display error
      */
    global define void usedNameErrorPopup () ``{
        // error popup
        Report::Error (_("Name you set is already used
Use other one."));
    }

    /**
      * Display error
      * @return true if shall retry
      */
    global define boolean writeErrorPopup () ``{
        // yes-no popup
	return UI::YesNoPopup (_("An error occured during bootloader
installation. Retry to configure bootloader?"));
    }

    /**
      * Display popup
      */
    global define void displayGfxMenuChangePopup () ``{
	// message popup, gfxmenu is option name, leave as is
	UI::MessagePopup (_("Disks settings changed,
please check gfxmenu settings"));
    }

    /**
      * Display yes-no popup
      * @return true if confirmed
      */
    global define boolean confirmOptionDeletePopup () ``{
	// yes-no popup
	return UI::YesNoPopup (_("Really delete selected option?"));
    }

    /**
      * Display error popup with log
      * @param header string error header
      * @param log string logfile contents
      */
    global define void errorWithLogPopup (string header, string log) ``{
	term text = `RichText( "<p>" + log + "</p>" );
	UI::OpenDialog(`opt ( `decorated ),
	    `VBox (`HSpacing(75),
		// heading
		`Heading(header),
		text,     // e.g. `Richtext()
		`PushButton( `id(`ok_help), `opt(`default), OKButtonLabel() )
	    )
	);

	UI::SetFocus(`id(`ok_help) );
	any r = UI::UserInput();
	UI::CloseDialog();
    }

    /**
      * Display popup
      */
    global define void displayNoSupportPopup () ``{
	UI::MessagePopup (_("Sorry, there are currently
no options to set here."));
    }

    /**
      * Display popup
      */
    global define void noBootloaderPopup () ``{
	Report::Error (_("Unable to install bootloader."));
    }
}
