#! /bin/sh

# Script to create an initial ELILO config file & initrd.
#
# Usage:
#   doelilo [root_dir] [ -m mbr_device ] [ -v vga_fb_mode ]
#           [ -a partition_spec ] [ -d disk_param ] [ -d ... ]
#           [ -o other_system_entry ] [ -o ... ]
#
# -a, -m and -v are ignored
#
# Example:
#
# doelilo /blub -m /dev/hda
#
# As an alternative, specify the root & boot devices via environment
# variables. e.g.: rootdev=/dev/hda bootdev=/dev/hda1 doelilo
#
# on errors:
#   exit code > 0
#
# Version 1.0
#
# Author: Andreas Schwab <schwab@suse.de>
# (c) 2001 SuSE GmbH

get_device () {
  x1=$(cat /proc/mounts 2>/dev/null | grep -F " /mnt$1 ")
  x2=$(echo "$x1" | wc -l)
  x3=$(echo "$x1" | cut -f 1 -d " ")

  if [ $x2 -eq 1 -a -b "$x3" ] ; then
    echo "$x3"
  else
    x1=$(mount 2>/dev/null | grep -F " on $1 ")
    x2=$(echo "$x1" | wc -l)
    x3=$(echo "$x1" | cut -f 1 -d " ")

    if [ $x2 -eq 1 -a -b "$x3" ] ; then
      echo "$x3"
    fi
  fi
}

get_device_number () {
  major=${5%,}
  minor=$6
  printf "%x\n" $(($major*256 + $minor))
}

root_dir=$1
test -n "$root_dir" || root_dir=/
shift

if test -z "$rootdev"; then
    rootdev=$(get_device "$root_dir")
    test -n "$rootdev" || exit 11
fi
export rootdev
if test -b "$root_dir$rootdev"; then
  numeric_rootdev=$(get_device_number $(ls -ln "$root_dir$rootdev"))
else
  # punt
  numeric_rootdev=$rootdev
fi
#echo "using \"$rootdev\" as root device (mounted on \"$root_dir\")"
echo "using \"$rootdev\" ($numeric_rootdev) as root device (mounted on \"$root_dir\")"

if test -z "$(get_device /boot)"; then
  echo "/boot is not a separate partition"
  exit 12
fi

PATH=/usr/lib/YaST2/bin:$root_dir/usr/lib/YaST2/bin:$root_dir/sbin:$PATH

# create a fallback kernel
if [ ! -f "$root_dir/boot/vmlinuz.shipped" ] ; then
  cp $root_dir/boot/vmlinuz $root_dir/boot/vmlinuz.shipped || exit 31
fi

# make an initial ram disk
mk_initrd $root_dir || exit

{
  echo "# ELILO config file
prompt
timeout=80
read-only
"

  for kernel in '' .shipped; do
    if test -f $root_dir/boot/vmlinuz$kernel ; then
      echo "image=/vmlinuz$kernel"
      if test "$kernel" = .shipped; then
	echo "	label=failsafe"
      else
	echo "	label=linux$kernel"
      fi
      echo "	root=$numeric_rootdev"
      if test -f $root_dir/boot/initrd$kernel; then
	echo "	initrd=/initrd$kernel"
      fi
      if test "$kernel" = .shipped; then
	echo "	append=\"ide=nodma${append:+ $append}\""
      elif test -n "$append"; then
	echo "	append=\"$append\""
      fi
      echo
    fi
  done
  echo -n "# Created by YaST2 on " 
  date
} > $root_dir/boot/efi/SuSE/elilo.conf

# Now set the appropriate EFI environment variables 

# boot device
bootdev=$(get_device /boot)

# disk /boot is on
bootdsk=`echo $bootdev | sed -e 's/[0-9]*$//' -e 's/\([0-9]\)p/\1/'`

# partition of /boot
bootprt=${bootdev#$bootdsk}

# check for old SuSE Linux entries.
BOOTENTRY="`/usr/sbin/efibootmgr |grep "SuSE Linux" |cut -f1 -d\* |cut -c5-`"
if [ "$BOOTENTRY" != "" ]; then
  /usr/sbin/efibootmgr -b $BOOTENTRY -B -q
fi

/usr/sbin/efibootmgr -c -L "SuSE Linux" -d $bootdsk  -l \\efi\\SuSE\\elilo.efi -p $bootprt -q
