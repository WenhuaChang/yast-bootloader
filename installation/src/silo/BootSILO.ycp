/**
 * File:
 *	BootSILO.ycp
 *
 * Module:
 *	BootSILO
 *
 * Summary:
 *	functions for bootload setup
 *
 * Authors:
 *	Klaus Kaempf <kkaempf@suse.de>
 *	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 */
{
    module "BootSILO";

    textdomain "bootloader";

    import "Boot";
    import "Kernel";

    global boolean  promalias = false;

    global boolean  defaultdevice = false;

    /**
     * DisplayLogFile
     * Displaying log files
     * @ return 'ok_help
     */
    global define DisplayLogFile( string msg_text ) ``{
            term text = `RichText( "<p>" + msg_text + "</p>" );
            UI::OpenDialog(`opt ( `decorated ),
                       `VBox (`HSpacing(75),
                                // heading
                              `Heading( _("Error Log File")),
                              text,     // e.g. `Richtext()
                              `PushButton( `id(`ok_help), `opt(`default), OKButtonLabel() )
                              )
                       );

            UI::SetFocus(`id(`ok_help) );
            any r = UI::UserInput();
            UI::CloseDialog();
            return (r);
    };



    /**
     * WriteUpdate
     * Calling mk_initrd and lilo while update.
     * @ return void
     */
    global define void WriteUpdate()
    ``{
        // Calling mk_initrd

        if ( SCR::Execute (.target.bash, "/sbin/mk_initrd >> /var/log/YaST2/y2logmk_initrd 2>> /var/log/YaST2/y2logmk_initrd") != 0 )
        {
            any retAsk = UI::AskShowLog( "mk_initrd" );
            if ( retAsk == `yes )
            {
                string text = "";

                text = SCR::Read (.target.string, "/var/log/YaST2/y2logmk_initrd");
                DisplayLogFile( text );
            }
        }

	// Replace X.Y with 8.1 in /boot/message and modify silo.conf, if
	// necessary.
	SCR::Execute (.target.bash, "/usr/lib/YaST2/bin/update_silo_conf / >>/var/log/YaST2/y2logsilo 2>>/var/log/YaST2/y2logsilo");

        any retAsk = `yes;
        while ( retAsk == `yes
                && SCR::Execute (.target.bash, "/sbin/silo >> /var/log/YaST2/y2logsilo 2>> /var/log/YaST2/y2logsilo") != 0 )
        {
            retAsk = UI::AskRetry( "silo" );
            while ( retAsk == `log )
            {
                string text = "";

                // FIXME: Installation::destdir should be removed?
                text = SCR::Read (.target.string, Installation::destdir + "/var/log/YaST2/y2logsilo");
                DisplayLogFile( text );
                retAsk = UI::AskRetry( "silo" );
            }
        }
    }


    /**
     * AskParameters
     *
     * helper function for inst_bootloader
     * provide ui code to ask LILO specific parameters
     * Input field for PROM changes and boot parameters
     *
     * @returns: list of <uicode>
     */

    global define list AskParameters ()
    ``{
	return [
	    `Left (`CheckBox (`id (`alias),
		// check box
		_("Create PROM alias '&linux'"),
		promalias)),
	    `Left (`CheckBox (`id (`change_prom),
		// check box
		_("Set default &PROM boot device"),
		defaultdevice))
	];
    }


    /**
     * HelpParameters
     *
     * help text for the values from AskParameters ()
     *
     * @returns: string of help text
     */

    global define string HelpParameters ()
    ``{
	// helptext for the customized SILO installation
	// part 1 of 3
	return _("<p>
SILO (the SPARC Improved boot LOader) can be installed in different locations:
</p>")

	// part 2 of 3
	+ _("<p>
- In the <b>MBR</b> (the Master Boot Record).  This is recommended whenever SuSE Linux
is the only operating system on the hard drive or when you are <em>absolutely certain</em> all other operating systems can be booted with SILO.</p>\n")

	// part 3 of 3
	+ _("<p>
- In the <b>/boot</b> partition.  This option can always be used\nif you
have a number of operating systems on the hard drive. The\nadvantage of this
method is that the MBR is left intact.\nYou should use this method, if you have
SunOS or Solaris installed\non the same hard drive.\n
</p>");

    }

    /**
     * HandleParameters
     *
     * helper function for inst_bootloader
     * called after UI::UserInput() returned
     *  (only if AskParameters() returned a non-empty list)
     */

    global define void HandleParameters ()
    ``{
	any option = nil;

	option = UI::QueryWidget(`id(`alias), `Value);
	if (is (option, boolean))
	{
	    promalias = option;
	}

	option = UI::QueryWidget(`id(`change_prom), `Value);
	if (is (option, boolean))
	{
	    defaultdevice = option;
	}

	return;
    }

    /**
     * Write () the SILO bootloader
     *
     */

    global define boolean Write ()
    ``{
        import "Mode";
        import "Boot";
        import "Misc";
        import "Report";

        include "ui/common_popups.ycp";



        if ( Mode::update )
        {
            // update mode
            WriteUpdate();
            return true;
        }

        // Boot setup start

        // additional message that needs to be displayed
        string confirm_boot_msg = Misc::boot_msg;

        string docmd = "/usr/lib/YaST2/bin/dosilo /";

        if (Boot::location == "mbr")
        {
            docmd = docmd + " -m " + Boot::device;
        }
        else if (Boot::location == "custom")
        {
            string last_dev_char = substring (Boot::device,
					      size(Boot::device)-1, 1);
            // if Boot::device does not end in a digit, it is a disk
	    // device for mbr
            if (!(filterchars (last_dev_char, "0123456789") == last_dev_char))
                docmd = docmd + " -m " + Boot::device;
        }

	y2milestone("silo: %1 cmd: %2", Boot::location, docmd);


        map doenv = $[ "bootdev" : Boot::BootPartitionDevice,
                       "rootdev" : Boot::RootPartitionDevice,
                       "append" : Kernel::cmdLine];
        y2milestone ("doenv: %1", doenv);
        // Call silo
        if (0 != SCR::Execute(.target.bash, docmd, doenv))
        {
            // error popup
            Report::Error(_("Could not write the SILO boot sector"));
        }

	// On SPARC, set the right device for a hard reboot to find our
	// installed system. Modify the PROM parameters if necessary, too.

	if (Kernel::switched)
	{
	    string silo_device = Boot::device;
	    string reboot_device = SCR::Read (.prom.path,silo_device);

	    y2milestone ("reboot device is: %1", reboot_device);
	    SCR::Execute (.target.bash, "/bin/echo \""+reboot_device+"\" >/proc/sys/kernel/reboot-cmd");
	}

	if (promalias)
	{
	    string silo_device = Boot::device;
	    string boot_device = SCR::Read (.prom.path, silo_device);

	    if (Boot::defaultdevice)
	    {
		y2milestone ("create linux alias %1 (%2) as default",
			     boot_device, silo_device);
		SCR::Write (.prom.boot-device, "linux");
	    }
	    else
	    {
		y2milestone ("create linux alias %1 (%s)",
			     boot_device, silo_device);

	    }
	    SCR::Write (.prom.alias.linux, boot_device);
	}
	else if (Boot::defaultdevice)
	{
	    string silo_device = Boot::device;
	    string boot_device = SCR::Read (.prom.path,silo_device);

	    y2milestone ("setting boot-device to %1 (%2) as default",
			 boot_device, silo_device);
	    SCR::Write (.prom.boot-device, boot_device);
	}

	return true;
    }

    /**
     * constructor
     *
     */

    global define void BootSILO ()
    ``{
	if (SCR::Read(.prom.hasaliases) == 1)
	    promalias = true;
	else
	    promalias = false;
	defaultdevice = true;
    }
}
