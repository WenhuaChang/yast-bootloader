<?xml version="1.0" encoding='ISO-8859-1'?>

    <section id="boottop">
        <title>Bootloader module</title>
	<para>
<computeroutput>Bootloader.ycp</computeroutput> module is the top module, which should be used by other modules to call bootloader-related actions. Contains
switching mechanism to call requested functions for appropriate bootloader.
	</para>
        <section>
            <title>List of declarations</title>
            <itemizedlist>
                <listitem><para><computeroutput>global define map Export ()</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define void Import (map settings)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define boolean Read ()</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define void Reset ()</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define void Propose ()</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define string Summary (list style)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define boolean Write ()</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define void SetWriteMode (map settings)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define string getDefaultSection ()</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define string getKernelParam (string section, string key)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define list getSectionsList (symbol type)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define boolean setKernelParam (string section, string key, string value)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define string getLoaderType ()</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define void setLoaderType (string bootloader)</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define void getLoaderType (string bootloader)</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define string getRootDevice ()</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define string getBootDevice ()</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define void setRootDevice (string device)</computeroutput></para></listitem>
                <listitem><para><computeroutput>global define void setBootDevice (string device)</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define boolean LbaSupport()</computeroutput></para></listitem>
		<listitem><para><computeroutput>global define void ReadOrProposeIfNeeded ()</computeroutput></para></listitem>

		<listitem><para><computeroutput>global boolean repeating_write</computeroutput></para></listitem>

            </itemizedlist>
        </section>
        <section>
            <title>Main functions</title>
            <itemizedlist>
                <listitem><para><computeroutput>global define map Export ()</computeroutput> returns map containing all internal settings of bootloader, including bootloader-specific
                    settings.</para></listitem>
                <listitem><para><computeroutput>global define void Import (map settings)</computeroutput> imports map of settings to bootloader module's internal memory. Shall contain
                    bootloader-specific and initrd settings too.</para></listitem>
                <listitem><para><computeroutput>global define boolean Read ()</computeroutput> reads all saved settings from disk to module's internal memory. Returns true on success,
                    false on fail.</para></listitem>
                <listitem><para><computeroutput>global define void Reset ()</computeroutput> resets all settings stored in bootloader's internal memory to initial values.</para></listitem>
                <listitem><para><computeroutput>global define void Propose ()</computeroutput> generates proposed settings and stores them in module's internal memory.</para></listitem>
                <listitem><para><computeroutput>global define string Summary (list style)</computeroutput> generates bootloader summary and returns it in result string.
                    Parameter is list of symbols specifying style of summary (see autogenerated documentation)</para></listitem>
                <listitem><para><computeroutput>global define boolean Write ()</computeroutput> writes bootloader configuration to disk or eprom (platform-dependent).</para></listitem>
		<listitem><para><computeroutput>global define void SetWriteMode (map settings)</computeroutput> sets variables, which may change the bootloader writing process.
		    As parameter takes a map, where keys are variable names (as strings), values will be set into appropriate variables. If some key is missing, variable stays unchanged.
		    Available variables are:
		    <itemizedlist>
			<listitem><para><computeroutput>"insert_initrd" : boolean</computeroutput> forces (if true) or forbids (if false) inserting initrd to bootloader configuration files
			    when saving bootloader configuration if exists. Doesn't remove it if present and set to false. Default is false.</para></listitem>
			<listitem><para><computeroutput>"initrd_changed_externally" : boolean</computeroutput> makes (if true) saving process saving cfg. files the same way like
			    if initrd might be added or removed. Default is false. In case of LILO and other bootloaders which need to recreate lists of blocks
			    calls the bootloader installed (eg. lilo).</para></listitem>
			<listitem><para><computeroutput>"forbid_save_initrd" : boolean</computeroutput> forbids (if true) or allows (if false) saving and creating initrd. Doesn't affect function
			    Initrd::Write, only avoids calling this function from Bootloader::Write. Default is false.</para></listitem>
			<listitem><para><computeroutput>"save_all" : boolean</computeroutput> if true forces saving of all bootloader settings, including recreating initrd, saving
			    bootloader configuration file(s) and calling required executable. The process is the same as during installation.</para></listitem>
		    </itemizedlist>
		</para></listitem>
            </itemizedlist>
        </section>
        <section>
            <title>Linux sections handling functions</title>
            <itemizedlist>
                <listitem><para><computeroutput>global define string getDefaultSection ()</computeroutput> returns string containing label (or title) of currently set
                    default section.</para></listitem>
                <listitem><para><computeroutput>global define string getKernelParam (string section, string key)</computeroutput> parses kernel parameters in specified section,
                    selects specified parameter, and returns it's value. Returns "false" if option or section is not present, "true" if present without value (eg. nosmp).
                    Set section name to "DEFAULT" to use default section.</para></listitem>
                <listitem><para><computeroutput>global define list getSectionsList (symbol type)</computeroutput> returns list of strings representing section names. Argument
                    type can be set to `all (list of all sections), `linux (list of linux sections only) and `other (list other sections only).</para></listitem>
                <listitem><para><computeroutput>global define boolean setKernelParam (string section, string key, string value)</computeroutput> adds or replaces kernel parameter
                    in specified section. Returns true on success, false on fail. If value is set to "true", parameter without value is added, if "false", parameter is removed. </para></listitem>
            </itemizedlist>
	    <para>
		Note, that after changing of kernel parameters, you must call the Bootloader::Write () function.
	    </para>
        </section>
        <section>
            <title>Other functions</title>
            <itemizedlist>
                <listitem><para><computeroutput>global define string getLoaderType ()</computeroutput> returns currently used or configured bootloader. There will be no global
                    variable for detecting current bootloader.</para></listitem>
		<listitem><para><computeroutput>global define void setLoaderType (string bootloader)</computeroutput> sets the bootloader to use. If parameter is nil, then
		    next time <computeroutput>getLoaderType ()</computeroutput> will be called bootloader will be reread from disk or re-detected.</para></listitem>
		<listitem><para><computeroutput>global define string getRootDevice ()</computeroutput> returns device which contains the / (root) directory.</para></listitem>
		<listitem><para><computeroutput>global define string getBootDevice ()</computeroutput> returns device containing the /boot directory. Returns the same as getRootDevice ()
		    if no extra /boot partition exists.</para></listitem>
		<listitem><para><computeroutput>global define void setRootDevice (string device)</computeroutput> sets device containing the / (root) directory. Should be set to real
		    root partition of installed/configured machine. Normally this function isn't needed to be used, everything gets detected.</para></listitem>
                <listitem><para><computeroutput>global define void setBootDevice (string device)</computeroutput> sets device containing the /boot directory. Should be set to real
		    /boot partition of installed/configured machine. Normally this function isn't needed to be used, everything gets detected.</para></listitem>

                <listitem><para><computeroutput>global define boolean LbaSupport()</computeroutput> returns true if current configuration supports LBA-32 mode (and in this case
		    no extra /boot partition is required).</para></listitem>
                <listitem><para><computeroutput>global define void ReadOrProposeIfNeeded ()</computeroutput> checks whether settings were read or proposed, and if not,
		    reads or proposes new settings (according to current Mode::* variables). Should be used only from internal functions of bootloader module.</para></listitem>
            </itemizedlist>
        </section>
	<section>
	    <title>Variables</title>
	    <itemizedlist>
		<listitem><para><computeroutput>global boolean repeating_write</computeroutput> is used just for internal module's needs (detects, whether repeated writing is running
		    and in case of installation the installation progress bar shall not be moved).</para></listitem>
	    </itemizedlist>
	</section>
    </section>

